/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! highlight.js v9.12.0 | BSD3 License | git.io/hljslicense */
!function (e) {
  var t = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window || "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self; true ? e(exports) : t && (t.hljs = e({}), "function" == typeof define && define.amd && define([], function () {
    return t.hljs;
  }));
}(function (e) {
  function t(e) {
    return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }function r(e) {
    return e.nodeName.toLowerCase();
  }function a(e, t) {
    var r = e && e.exec(t);return r && 0 === r.index;
  }function n(e) {
    return E.test(e);
  }function i(e) {
    var t,
        r,
        a,
        i,
        s = e.className + " ";if (s += e.parentNode ? e.parentNode.className : "", r = M.exec(s)) return w(r[1]) ? r[1] : "no-highlight";for (s = s.split(/\s+/), t = 0, a = s.length; a > t; t++) {
      if (i = s[t], n(i) || w(i)) return i;
    }
  }function s(e) {
    var t,
        r = {},
        a = Array.prototype.slice.call(arguments, 1);for (t in e) {
      r[t] = e[t];
    }return a.forEach(function (e) {
      for (t in e) {
        r[t] = e[t];
      }
    }), r;
  }function c(e) {
    var t = [];return function a(e, n) {
      for (var i = e.firstChild; i; i = i.nextSibling) {
        3 === i.nodeType ? n += i.nodeValue.length : 1 === i.nodeType && (t.push({ event: "start", offset: n, node: i }), n = a(i, n), r(i).match(/br|hr|img|input/) || t.push({ event: "stop", offset: n, node: i }));
      }return n;
    }(e, 0), t;
  }function o(e, a, n) {
    function i() {
      return e.length && a.length ? e[0].offset !== a[0].offset ? e[0].offset < a[0].offset ? e : a : "start" === a[0].event ? e : a : e.length ? e : a;
    }function s(e) {
      function a(e) {
        return " " + e.nodeName + '="' + t(e.value).replace('"', "&quot;") + '"';
      }u += "<" + r(e) + N.map.call(e.attributes, a).join("") + ">";
    }function c(e) {
      u += "</" + r(e) + ">";
    }function o(e) {
      ("start" === e.event ? s : c)(e.node);
    }for (var l = 0, u = "", d = []; e.length || a.length;) {
      var b = i();if (u += t(n.substring(l, b[0].offset)), l = b[0].offset, b === e) {
        d.reverse().forEach(c);do {
          o(b.splice(0, 1)[0]), b = i();
        } while (b === e && b.length && b[0].offset === l);d.reverse().forEach(s);
      } else "start" === b[0].event ? d.push(b[0].node) : d.pop(), o(b.splice(0, 1)[0]);
    }return u + t(n.substr(l));
  }function l(e) {
    return e.v && !e.cached_variants && (e.cached_variants = e.v.map(function (t) {
      return s(e, { v: null }, t);
    })), e.cached_variants || e.eW && [s(e)] || [e];
  }function u(e) {
    function t(e) {
      return e && e.source || e;
    }function r(r, a) {
      return new RegExp(t(r), "m" + (e.cI ? "i" : "") + (a ? "g" : ""));
    }function a(n, i) {
      if (!n.compiled) {
        if (n.compiled = !0, n.k = n.k || n.bK, n.k) {
          var s = {},
              c = function c(t, r) {
            e.cI && (r = r.toLowerCase()), r.split(" ").forEach(function (e) {
              var r = e.split("|");s[r[0]] = [t, r[1] ? Number(r[1]) : 1];
            });
          };"string" == typeof n.k ? c("keyword", n.k) : k(n.k).forEach(function (e) {
            c(e, n.k[e]);
          }), n.k = s;
        }n.lR = r(n.l || /\w+/, !0), i && (n.bK && (n.b = "\\b(" + n.bK.split(" ").join("|") + ")\\b"), n.b || (n.b = /\B|\b/), n.bR = r(n.b), n.e || n.eW || (n.e = /\B|\b/), n.e && (n.eR = r(n.e)), n.tE = t(n.e) || "", n.eW && i.tE && (n.tE += (n.e ? "|" : "") + i.tE)), n.i && (n.iR = r(n.i)), null == n.r && (n.r = 1), n.c || (n.c = []), n.c = Array.prototype.concat.apply([], n.c.map(function (e) {
          return l("self" === e ? n : e);
        })), n.c.forEach(function (e) {
          a(e, n);
        }), n.starts && a(n.starts, i);var o = n.c.map(function (e) {
          return e.bK ? "\\.?(" + e.b + ")\\.?" : e.b;
        }).concat([n.tE, n.i]).map(t).filter(Boolean);n.t = o.length ? r(o.join("|"), !0) : { exec: function exec() {
            return null;
          } };
      }
    }a(e);
  }function d(e, r, n, i) {
    function s(e, t) {
      var r, n;for (r = 0, n = t.c.length; n > r; r++) {
        if (a(t.c[r].bR, e)) return t.c[r];
      }
    }function c(e, t) {
      if (a(e.eR, t)) {
        for (; e.endsParent && e.parent;) {
          e = e.parent;
        }return e;
      }return e.eW ? c(e.parent, t) : void 0;
    }function o(e, t) {
      return !n && a(t.iR, e);
    }function l(e, t) {
      var r = v.cI ? t[0].toLowerCase() : t[0];return e.k.hasOwnProperty(r) && e.k[r];
    }function p(e, t, r, a) {
      var n = a ? "" : L.classPrefix,
          i = '<span class="' + n,
          s = r ? "" : R;return i += e + '">', i + t + s;
    }function m() {
      var e, r, a, n;if (!N.k) return t(E);for (n = "", r = 0, N.lR.lastIndex = 0, a = N.lR.exec(E); a;) {
        n += t(E.substring(r, a.index)), e = l(N, a), e ? (M += e[1], n += p(e[0], t(a[0]))) : n += t(a[0]), r = N.lR.lastIndex, a = N.lR.exec(E);
      }return n + t(E.substr(r));
    }function f() {
      var e = "string" == typeof N.sL;if (e && !x[N.sL]) return t(E);var r = e ? d(N.sL, E, !0, k[N.sL]) : b(E, N.sL.length ? N.sL : void 0);return N.r > 0 && (M += r.r), e && (k[N.sL] = r.top), p(r.language, r.value, !1, !0);
    }function g() {
      C += null != N.sL ? f() : m(), E = "";
    }function _(e) {
      C += e.cN ? p(e.cN, "", !0) : "", N = Object.create(e, { parent: { value: N } });
    }function h(e, t) {
      if (E += e, null == t) return g(), 0;var r = s(t, N);if (r) return r.skip ? E += t : (r.eB && (E += t), g(), r.rB || r.eB || (E = t)), _(r, t), r.rB ? 0 : t.length;var a = c(N, t);if (a) {
        var n = N;n.skip ? E += t : (n.rE || n.eE || (E += t), g(), n.eE && (E = t));do {
          N.cN && (C += R), N.skip || (M += N.r), N = N.parent;
        } while (N !== a.parent);return a.starts && _(a.starts, ""), n.rE ? 0 : t.length;
      }if (o(t, N)) throw new Error('Illegal lexeme "' + t + '" for mode "' + (N.cN || "<unnamed>") + '"');return E += t, t.length || 1;
    }var v = w(e);if (!v) throw new Error('Unknown language: "' + e + '"');u(v);var y,
        N = i || v,
        k = {},
        C = "";for (y = N; y !== v; y = y.parent) {
      y.cN && (C = p(y.cN, "", !0) + C);
    }var E = "",
        M = 0;try {
      for (var B, S, $ = 0;;) {
        if (N.t.lastIndex = $, B = N.t.exec(r), !B) break;S = h(r.substring($, B.index), B[0]), $ = B.index + S;
      }for (h(r.substr($)), y = N; y.parent; y = y.parent) {
        y.cN && (C += R);
      }return { r: M, value: C, language: e, top: N };
    } catch (A) {
      if (A.message && -1 !== A.message.indexOf("Illegal")) return { r: 0, value: t(r) };throw A;
    }
  }function b(e, r) {
    r = r || L.languages || k(x);var a = { r: 0, value: t(e) },
        n = a;return r.filter(w).forEach(function (t) {
      var r = d(t, e, !1);r.language = t, r.r > n.r && (n = r), r.r > a.r && (n = a, a = r);
    }), n.language && (a.second_best = n), a;
  }function p(e) {
    return L.tabReplace || L.useBR ? e.replace(B, function (e, t) {
      return L.useBR && "\n" === e ? "<br>" : L.tabReplace ? t.replace(/\t/g, L.tabReplace) : "";
    }) : e;
  }function m(e, t, r) {
    var a = t ? C[t] : r,
        n = [e.trim()];return e.match(/\bhljs\b/) || n.push("hljs"), -1 === e.indexOf(a) && n.push(a), n.join(" ").trim();
  }function f(e) {
    var t,
        r,
        a,
        s,
        l,
        u = i(e);n(u) || (L.useBR ? (t = document.createElementNS("http://www.w3.org/1999/xhtml", "div"), t.innerHTML = e.innerHTML.replace(/\n/g, "").replace(/<br[ \/]*>/g, "\n")) : t = e, l = t.textContent, a = u ? d(u, l, !0) : b(l), r = c(t), r.length && (s = document.createElementNS("http://www.w3.org/1999/xhtml", "div"), s.innerHTML = a.value, a.value = o(r, c(s), l)), a.value = p(a.value), e.innerHTML = a.value, e.className = m(e.className, u, a.language), e.result = { language: a.language, re: a.r }, a.second_best && (e.second_best = { language: a.second_best.language, re: a.second_best.r }));
  }function g(e) {
    L = s(L, e);
  }function _() {
    if (!_.called) {
      _.called = !0;var e = document.querySelectorAll("pre code");N.forEach.call(e, f);
    }
  }function h() {
    addEventListener("DOMContentLoaded", _, !1), addEventListener("load", _, !1);
  }function v(t, r) {
    var a = x[t] = r(e);a.aliases && a.aliases.forEach(function (e) {
      C[e] = t;
    });
  }function y() {
    return k(x);
  }function w(e) {
    return e = (e || "").toLowerCase(), x[e] || x[C[e]];
  }var N = [],
      k = Object.keys,
      x = {},
      C = {},
      E = /^(no-?highlight|plain|text)$/i,
      M = /\blang(?:uage)?-([\w-]+)\b/i,
      B = /((^(<[^>]+>|\t|)+|(?:\n)))/gm,
      R = "</span>",
      L = { classPrefix: "hljs-", tabReplace: null, useBR: !1, languages: void 0 };return e.highlight = d, e.highlightAuto = b, e.fixMarkup = p, e.highlightBlock = f, e.configure = g, e.initHighlighting = _, e.initHighlightingOnLoad = h, e.registerLanguage = v, e.listLanguages = y, e.getLanguage = w, e.inherit = s, e.IR = "[a-zA-Z]\\w*", e.UIR = "[a-zA-Z_]\\w*", e.NR = "\\b\\d+(\\.\\d+)?", e.CNR = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", e.BNR = "\\b(0b[01]+)", e.RSR = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", e.BE = { b: "\\\\[\\s\\S]", r: 0 }, e.ASM = { cN: "string", b: "'", e: "'", i: "\\n", c: [e.BE] }, e.QSM = { cN: "string", b: '"', e: '"', i: "\\n", c: [e.BE] }, e.PWM = { b: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/ }, e.C = function (t, r, a) {
    var n = e.inherit({ cN: "comment", b: t, e: r, c: [] }, a || {});return n.c.push(e.PWM), n.c.push({ cN: "doctag", b: "(?:TODO|FIXME|NOTE|BUG|XXX):", r: 0 }), n;
  }, e.CLCM = e.C("//", "$"), e.CBCM = e.C("/\\*", "\\*/"), e.HCM = e.C("#", "$"), e.NM = { cN: "number", b: e.NR, r: 0 }, e.CNM = { cN: "number", b: e.CNR, r: 0 }, e.BNM = { cN: "number", b: e.BNR, r: 0 }, e.CSSNM = { cN: "number", b: e.NR + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?", r: 0 }, e.RM = { cN: "regexp", b: /\//, e: /\/[gimuy]*/, i: /\n/, c: [e.BE, { b: /\[/, e: /\]/, r: 0, c: [e.BE] }] }, e.TM = { cN: "title", b: e.IR, r: 0 }, e.UTM = { cN: "title", b: e.UIR, r: 0 }, e.METHOD_GUARD = { b: "\\.\\s*" + e.UIR, r: 0 }, e.registerLanguage("apache", function (e) {
    var t = { cN: "number", b: "[\\$%]\\d+" };return { aliases: ["apacheconf"], cI: !0, c: [e.HCM, { cN: "section", b: "</?", e: ">" }, { cN: "attribute", b: /\w+/, r: 0, k: { nomarkup: "order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername" }, starts: { e: /$/, r: 0, k: { literal: "on off all" }, c: [{ cN: "meta", b: "\\s\\[", e: "\\]$" }, { cN: "variable", b: "[\\$%]\\{", e: "\\}", c: ["self", t] }, t, e.QSM] } }], i: /\S/ };
  }), e.registerLanguage("bash", function (e) {
    var t = { cN: "variable", v: [{ b: /\$[\w\d#@][\w\d_]*/ }, { b: /\$\{(.*?)}/ }] },
        r = { cN: "string", b: /"/, e: /"/, c: [e.BE, t, { cN: "variable", b: /\$\(/, e: /\)/, c: [e.BE] }] },
        a = { cN: "string", b: /'/, e: /'/ };return { aliases: ["sh", "zsh"], l: /\b-?[a-z\._]+\b/, k: { keyword: "if then else elif fi for while in do done case esac function", literal: "true false", built_in: "break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp", _: "-ne -eq -lt -gt -f -d -e -s -l -a" }, c: [{ cN: "meta", b: /^#![^\n]+sh\s*$/, r: 10 }, { cN: "function", b: /\w[\w\d_]*\s*\(\s*\)\s*\{/, rB: !0, c: [e.inherit(e.TM, { b: /\w[\w\d_]*/ })], r: 0 }, e.HCM, r, a, t] };
  }), e.registerLanguage("coffeescript", function (e) {
    var t = { keyword: "in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not", literal: "true false null undefined yes no on off", built_in: "npm require console print module global window document" },
        r = "[A-Za-z$_][0-9A-Za-z$_]*",
        a = { cN: "subst", b: /#\{/, e: /}/, k: t },
        n = [e.BNM, e.inherit(e.CNM, { starts: { e: "(\\s*/)?", r: 0 } }), { cN: "string", v: [{ b: /'''/, e: /'''/, c: [e.BE] }, { b: /'/, e: /'/, c: [e.BE] }, { b: /"""/, e: /"""/, c: [e.BE, a] }, { b: /"/, e: /"/, c: [e.BE, a] }] }, { cN: "regexp", v: [{ b: "///", e: "///", c: [a, e.HCM] }, { b: "//[gim]*", r: 0 }, { b: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/ }] }, { b: "@" + r }, { sL: "javascript", eB: !0, eE: !0, v: [{ b: "```", e: "```" }, { b: "`", e: "`" }] }];a.c = n;var i = e.inherit(e.TM, { b: r }),
        s = "(\\(.*\\))?\\s*\\B[-=]>",
        c = { cN: "params", b: "\\([^\\(]", rB: !0, c: [{ b: /\(/, e: /\)/, k: t, c: ["self"].concat(n) }] };return { aliases: ["coffee", "cson", "iced"], k: t, i: /\/\*/, c: n.concat([e.C("###", "###"), e.HCM, { cN: "function", b: "^\\s*" + r + "\\s*=\\s*" + s, e: "[-=]>", rB: !0, c: [i, c] }, { b: /[:\(,=]\s*/, r: 0, c: [{ cN: "function", b: s, e: "[-=]>", rB: !0, c: [c] }] }, { cN: "class", bK: "class", e: "$", i: /[:="\[\]]/, c: [{ bK: "extends", eW: !0, i: /[:="\[\]]/, c: [i] }, i] }, { b: r + ":", e: ":", rB: !0, rE: !0, r: 0 }]) };
  }), e.registerLanguage("cpp", function (e) {
    var t = { cN: "keyword", b: "\\b[a-z\\d_]*_t\\b" },
        r = { cN: "string", v: [{ b: '(u8?|U)?L?"', e: '"', i: "\\n", c: [e.BE] }, { b: '(u8?|U)?R"', e: '"', c: [e.BE] }, { b: "'\\\\?.", e: "'", i: "." }] },
        a = { cN: "number", v: [{ b: "\\b(0b[01']+)" }, { b: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" }, { b: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }], r: 0 },
        n = { cN: "meta", b: /#\s*[a-z]+\b/, e: /$/, k: { "meta-keyword": "if else elif endif define undef warning error line pragma ifdef ifndef include" }, c: [{ b: /\\\n/, r: 0 }, e.inherit(r, { cN: "meta-string" }), { cN: "meta-string", b: /<[^\n>]*>/, e: /$/, i: "\\n" }, e.CLCM, e.CBCM] },
        i = e.IR + "\\s*\\(",
        s = { keyword: "int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not", built_in: "std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr", literal: "true false nullptr NULL" },
        c = [t, e.CLCM, e.CBCM, a, r];return { aliases: ["c", "cc", "h", "c++", "h++", "hpp"], k: s, i: "</", c: c.concat([n, { b: "\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<", e: ">", k: s, c: ["self", t] }, { b: e.IR + "::", k: s }, { v: [{ b: /=/, e: /;/ }, { b: /\(/, e: /\)/ }, { bK: "new throw return else", e: /;/ }], k: s, c: c.concat([{ b: /\(/, e: /\)/, k: s, c: c.concat(["self"]), r: 0 }]), r: 0 }, { cN: "function", b: "(" + e.IR + "[\\*&\\s]+)+" + i, rB: !0, e: /[{;=]/, eE: !0, k: s, i: /[^\w\s\*&]/, c: [{ b: i, rB: !0, c: [e.TM], r: 0 }, { cN: "params", b: /\(/, e: /\)/, k: s, r: 0, c: [e.CLCM, e.CBCM, r, a, t] }, e.CLCM, e.CBCM, n] }, { cN: "class", bK: "class struct", e: /[{;:]/, c: [{ b: /</, e: />/, c: ["self"] }, e.TM] }]), exports: { preprocessor: n, strings: r, k: s } };
  }), e.registerLanguage("cs", function (e) {
    var t = { keyword: "abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long nameof object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield", literal: "null false true" },
        r = { cN: "string", b: '@"', e: '"', c: [{ b: '""' }] },
        a = e.inherit(r, { i: /\n/ }),
        n = { cN: "subst", b: "{", e: "}", k: t },
        i = e.inherit(n, { i: /\n/ }),
        s = { cN: "string", b: /\$"/, e: '"', i: /\n/, c: [{ b: "{{" }, { b: "}}" }, e.BE, i] },
        c = { cN: "string", b: /\$@"/, e: '"', c: [{ b: "{{" }, { b: "}}" }, { b: '""' }, n] },
        o = e.inherit(c, { i: /\n/, c: [{ b: "{{" }, { b: "}}" }, { b: '""' }, i] });n.c = [c, s, r, e.ASM, e.QSM, e.CNM, e.CBCM], i.c = [o, s, a, e.ASM, e.QSM, e.CNM, e.inherit(e.CBCM, { i: /\n/ })];var l = { v: [c, s, r, e.ASM, e.QSM] },
        u = e.IR + "(<" + e.IR + "(\\s*,\\s*" + e.IR + ")*>)?(\\[\\])?";return { aliases: ["csharp"], k: t, i: /::/, c: [e.C("///", "$", { rB: !0, c: [{ cN: "doctag", v: [{ b: "///", r: 0 }, { b: "<!--|-->" }, { b: "</?", e: ">" }] }] }), e.CLCM, e.CBCM, { cN: "meta", b: "#", e: "$", k: { "meta-keyword": "if else elif endif define undef warning error line region endregion pragma checksum" } }, l, e.CNM, { bK: "class interface", e: /[{;=]/, i: /[^\s:]/, c: [e.TM, e.CLCM, e.CBCM] }, { bK: "namespace", e: /[{;=]/, i: /[^\s:]/, c: [e.inherit(e.TM, { b: "[a-zA-Z](\\.?\\w)*" }), e.CLCM, e.CBCM] }, { cN: "meta", b: "^\\s*\\[", eB: !0, e: "\\]", eE: !0, c: [{ cN: "meta-string", b: /"/, e: /"/ }] }, { bK: "new return throw await else", r: 0 }, { cN: "function", b: "(" + u + "\\s+)+" + e.IR + "\\s*\\(", rB: !0, e: /[{;=]/, eE: !0, k: t, c: [{ b: e.IR + "\\s*\\(", rB: !0, c: [e.TM], r: 0 }, { cN: "params", b: /\(/, e: /\)/, eB: !0, eE: !0, k: t, r: 0, c: [l, e.CNM, e.CBCM] }, e.CLCM, e.CBCM] }] };
  }), e.registerLanguage("css", function (e) {
    var t = "[a-zA-Z-][a-zA-Z0-9_-]*",
        r = { b: /[A-Z\_\.\-]+\s*:/, rB: !0, e: ";", eW: !0, c: [{ cN: "attribute", b: /\S/, e: ":", eE: !0, starts: { eW: !0, eE: !0, c: [{ b: /[\w-]+\(/, rB: !0, c: [{ cN: "built_in", b: /[\w-]+/ }, { b: /\(/, e: /\)/, c: [e.ASM, e.QSM] }] }, e.CSSNM, e.QSM, e.ASM, e.CBCM, { cN: "number", b: "#[0-9A-Fa-f]+" }, { cN: "meta", b: "!important" }] } }] };return { cI: !0, i: /[=\/|'\$]/, c: [e.CBCM, { cN: "selector-id", b: /#[A-Za-z0-9_-]+/ }, { cN: "selector-class", b: /\.[A-Za-z0-9_-]+/ }, { cN: "selector-attr", b: /\[/, e: /\]/, i: "$" }, { cN: "selector-pseudo", b: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/ }, { b: "@(font-face|page)", l: "[a-z-]+", k: "font-face page" }, { b: "@", e: "[{;]", i: /:/, c: [{ cN: "keyword", b: /\w+/ }, { b: /\s/, eW: !0, eE: !0, r: 0, c: [e.ASM, e.QSM, e.CSSNM] }] }, { cN: "selector-tag", b: t, r: 0 }, { b: "{", e: "}", i: /\S/, c: [e.CBCM, r] }] };
  }), e.registerLanguage("diff", function (e) {
    return { aliases: ["patch"], c: [{ cN: "meta", r: 10, v: [{ b: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/ }, { b: /^\*\*\* +\d+,\d+ +\*\*\*\*$/ }, { b: /^\-\-\- +\d+,\d+ +\-\-\-\-$/ }] }, { cN: "comment", v: [{ b: /Index: /, e: /$/ }, { b: /={3,}/, e: /$/ }, { b: /^\-{3}/, e: /$/ }, { b: /^\*{3} /, e: /$/ }, { b: /^\+{3}/, e: /$/ }, { b: /\*{5}/, e: /\*{5}$/ }] }, { cN: "addition", b: "^\\+", e: "$" }, { cN: "deletion", b: "^\\-", e: "$" }, { cN: "addition", b: "^\\!", e: "$" }] };
  }), e.registerLanguage("http", function (e) {
    var t = "HTTP/[0-9\\.]+";return { aliases: ["https"], i: "\\S", c: [{ b: "^" + t, e: "$", c: [{ cN: "number", b: "\\b\\d{3}\\b" }] }, { b: "^[A-Z]+ (.*?) " + t + "$", rB: !0, e: "$", c: [{ cN: "string", b: " ", e: " ", eB: !0, eE: !0 }, { b: t }, { cN: "keyword", b: "[A-Z]+" }] }, { cN: "attribute", b: "^\\w", e: ": ", eE: !0, i: "\\n|\\s|=", starts: { e: "$", r: 0 } }, { b: "\\n\\n", starts: { sL: [], eW: !0 } }] };
  }), e.registerLanguage("ini", function (e) {
    var t = { cN: "string", c: [e.BE], v: [{ b: "'''", e: "'''", r: 10 }, { b: '"""', e: '"""', r: 10 }, { b: '"', e: '"' }, { b: "'", e: "'" }] };return { aliases: ["toml"], cI: !0, i: /\S/, c: [e.C(";", "$"), e.HCM, { cN: "section", b: /^\s*\[+/, e: /\]+/ }, { b: /^[a-z0-9\[\]_-]+\s*=\s*/, e: "$", rB: !0, c: [{ cN: "attr", b: /[a-z0-9\[\]_-]+/ }, { b: /=/, eW: !0, r: 0, c: [{ cN: "literal", b: /\bon|off|true|false|yes|no\b/ }, { cN: "variable", v: [{ b: /\$[\w\d"][\w\d_]*/ }, { b: /\$\{(.*?)}/ }] }, t, { cN: "number", b: /([\+\-]+)?[\d]+_[\d_]+/ }, e.NM] }] }] };
  }), e.registerLanguage("java", function (e) {
    var t = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",
        r = t + "(<" + t + "(\\s*,\\s*" + t + ")*>)?",
        a = "false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",
        n = "\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",
        i = { cN: "number", b: n, r: 0 };return { aliases: ["jsp"], k: a, i: /<\/|#/, c: [e.C("/\\*\\*", "\\*/", { r: 0, c: [{ b: /\w+@/, r: 0 }, { cN: "doctag", b: "@[A-Za-z]+" }] }), e.CLCM, e.CBCM, e.ASM, e.QSM, { cN: "class", bK: "class interface", e: /[{;=]/, eE: !0, k: "class interface", i: /[:"\[\]]/, c: [{ bK: "extends implements" }, e.UTM] }, { bK: "new throw return else", r: 0 }, { cN: "function", b: "(" + r + "\\s+)+" + e.UIR + "\\s*\\(", rB: !0, e: /[{;=]/, eE: !0, k: a, c: [{ b: e.UIR + "\\s*\\(", rB: !0, r: 0, c: [e.UTM] }, { cN: "params", b: /\(/, e: /\)/, k: a, r: 0, c: [e.ASM, e.QSM, e.CNM, e.CBCM] }, e.CLCM, e.CBCM] }, i, { cN: "meta", b: "@[A-Za-z]+" }] };
  }), e.registerLanguage("javascript", function (e) {
    var t = "[A-Za-z$_][0-9A-Za-z$_]*",
        r = { keyword: "in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as", literal: "true false null undefined NaN Infinity", built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise" },
        a = { cN: "number", v: [{ b: "\\b(0[bB][01]+)" }, { b: "\\b(0[oO][0-7]+)" }, { b: e.CNR }], r: 0 },
        n = { cN: "subst", b: "\\$\\{", e: "\\}", k: r, c: [] },
        i = { cN: "string", b: "`", e: "`", c: [e.BE, n] };n.c = [e.ASM, e.QSM, i, a, e.RM];var s = n.c.concat([e.CBCM, e.CLCM]);return { aliases: ["js", "jsx"], k: r, c: [{ cN: "meta", r: 10, b: /^\s*['"]use (strict|asm)['"]/ }, { cN: "meta", b: /^#!/, e: /$/ }, e.ASM, e.QSM, i, e.CLCM, e.CBCM, a, { b: /[{,]\s*/, r: 0, c: [{ b: t + "\\s*:", rB: !0, r: 0, c: [{ cN: "attr", b: t, r: 0 }] }] }, { b: "(" + e.RSR + "|\\b(case|return|throw)\\b)\\s*", k: "return throw case", c: [e.CLCM, e.CBCM, e.RM, { cN: "function", b: "(\\(.*?\\)|" + t + ")\\s*=>", rB: !0, e: "\\s*=>", c: [{ cN: "params", v: [{ b: t }, { b: /\(\s*\)/ }, { b: /\(/, e: /\)/, eB: !0, eE: !0, k: r, c: s }] }] }, { b: /</, e: /(\/\w+|\w+\/)>/, sL: "xml", c: [{ b: /<\w+\s*\/>/, skip: !0 }, { b: /<\w+/, e: /(\/\w+|\w+\/)>/, skip: !0, c: [{ b: /<\w+\s*\/>/, skip: !0 }, "self"] }] }], r: 0 }, { cN: "function", bK: "function", e: /\{/, eE: !0, c: [e.inherit(e.TM, { b: t }), { cN: "params", b: /\(/, e: /\)/, eB: !0, eE: !0, c: s }], i: /\[|%/ }, { b: /\$[(.]/ }, e.METHOD_GUARD, { cN: "class", bK: "class", e: /[{;=]/, eE: !0, i: /[:"\[\]]/, c: [{ bK: "extends" }, e.UTM] }, { bK: "constructor", e: /\{/, eE: !0 }], i: /#(?!!)/ };
  }), e.registerLanguage("json", function (e) {
    var t = { literal: "true false null" },
        r = [e.QSM, e.CNM],
        a = { e: ",", eW: !0, eE: !0, c: r, k: t },
        n = { b: "{", e: "}", c: [{ cN: "attr", b: /"/, e: /"/, c: [e.BE], i: "\\n" }, e.inherit(a, { b: /:/ })], i: "\\S" },
        i = { b: "\\[", e: "\\]", c: [e.inherit(a)], i: "\\S" };return r.splice(r.length, 0, n, i), { c: r, k: t, i: "\\S" };
  }), e.registerLanguage("makefile", function (e) {
    var t = { cN: "variable", v: [{ b: "\\$\\(" + e.UIR + "\\)", c: [e.BE] }, { b: /\$[@%<?\^\+\*]/ }] },
        r = { cN: "string", b: /"/, e: /"/, c: [e.BE, t] },
        a = { cN: "variable", b: /\$\([\w-]+\s/, e: /\)/, k: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" }, c: [t] },
        n = { b: "^" + e.UIR + "\\s*[:+?]?=", i: "\\n", rB: !0, c: [{ b: "^" + e.UIR, e: "[:+?]?=", eE: !0 }] },
        i = { cN: "meta", b: /^\.PHONY:/, e: /$/, k: { "meta-keyword": ".PHONY" }, l: /[\.\w]+/ },
        s = { cN: "section", b: /^[^\s]+:/, e: /$/, c: [t] };return { aliases: ["mk", "mak"], k: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath", l: /[\w-]+/, c: [e.HCM, t, r, a, n, i, s] };
  }), e.registerLanguage("xml", function (e) {
    var t = "[A-Za-z0-9\\._:-]+",
        r = { eW: !0, i: /</, r: 0, c: [{ cN: "attr", b: t, r: 0 }, { b: /=\s*/, r: 0, c: [{ cN: "string", endsParent: !0, v: [{ b: /"/, e: /"/ }, { b: /'/, e: /'/ }, { b: /[^\s"'=<>`]+/ }] }] }] };return { aliases: ["html", "xhtml", "rss", "atom", "xjb", "xsd", "xsl", "plist"], cI: !0, c: [{ cN: "meta", b: "<!DOCTYPE", e: ">", r: 10, c: [{ b: "\\[", e: "\\]" }] }, e.C("<!--", "-->", { r: 10 }), { b: "<\\!\\[CDATA\\[", e: "\\]\\]>", r: 10 }, { b: /<\?(php)?/, e: /\?>/, sL: "php", c: [{ b: "/\\*", e: "\\*/", skip: !0 }] }, { cN: "tag", b: "<style(?=\\s|>|$)", e: ">", k: { name: "style" }, c: [r], starts: { e: "</style>", rE: !0, sL: ["css", "xml"] } }, { cN: "tag", b: "<script(?=\\s|>|$)", e: ">", k: { name: "script" }, c: [r], starts: { e: "</script>", rE: !0, sL: ["actionscript", "javascript", "handlebars", "xml"] } }, { cN: "meta", v: [{ b: /<\?xml/, e: /\?>/, r: 10 }, { b: /<\?\w+/, e: /\?>/ }] }, { cN: "tag", b: "</?", e: "/?>", c: [{ cN: "name", b: /[^\/><\s]+/, r: 0 }, r] }] };
  }), e.registerLanguage("markdown", function (e) {
    return { aliases: ["md", "mkdown", "mkd"], c: [{ cN: "section", v: [{ b: "^#{1,6}", e: "$" }, { b: "^.+?\\n[=-]{2,}$" }] }, { b: "<", e: ">", sL: "xml", r: 0 }, { cN: "bullet", b: "^([*+-]|(\\d+\\.))\\s+" }, { cN: "strong", b: "[*_]{2}.+?[*_]{2}" }, { cN: "emphasis", v: [{ b: "\\*.+?\\*" }, { b: "_.+?_", r: 0 }] }, { cN: "quote", b: "^>\\s+", e: "$" }, { cN: "code", v: [{ b: "^```w*s*$", e: "^```s*$" }, { b: "`.+?`" }, { b: "^( {4}|	)", e: "$", r: 0 }] }, { b: "^[-\\*]{3,}", e: "$" }, { b: "\\[.+?\\][\\(\\[].*?[\\)\\]]", rB: !0, c: [{ cN: "string", b: "\\[", e: "\\]", eB: !0, rE: !0, r: 0 }, { cN: "link", b: "\\]\\(", e: "\\)", eB: !0, eE: !0 }, { cN: "symbol", b: "\\]\\[", e: "\\]", eB: !0, eE: !0 }], r: 10 }, { b: /^\[[^\n]+\]:/, rB: !0, c: [{ cN: "symbol", b: /\[/, e: /\]/, eB: !0, eE: !0 }, { cN: "link", b: /:\s*/, e: /$/, eB: !0 }] }] };
  }), e.registerLanguage("nginx", function (e) {
    var t = { cN: "variable", v: [{ b: /\$\d+/ }, { b: /\$\{/, e: /}/ }, { b: "[\\$\\@]" + e.UIR }] },
        r = { eW: !0, l: "[a-z/_]+", k: { literal: "on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll" }, r: 0, i: "=>", c: [e.HCM, { cN: "string", c: [e.BE, t], v: [{ b: /"/, e: /"/ }, { b: /'/, e: /'/ }] }, { b: "([a-z]+):/", e: "\\s", eW: !0, eE: !0, c: [t] }, { cN: "regexp", c: [e.BE, t], v: [{ b: "\\s\\^", e: "\\s|{|;", rE: !0 }, { b: "~\\*?\\s+", e: "\\s|{|;", rE: !0 }, { b: "\\*(\\.[a-z\\-]+)+" }, { b: "([a-z\\-]+\\.)+\\*" }] }, { cN: "number", b: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b" }, { cN: "number", b: "\\b\\d+[kKmMgGdshdwy]*\\b", r: 0 }, t] };return { aliases: ["nginxconf"], c: [e.HCM, { b: e.UIR + "\\s+{", rB: !0, e: "{", c: [{ cN: "section", b: e.UIR }], r: 0 }, { b: e.UIR + "\\s", e: ";|{", rB: !0, c: [{ cN: "attribute", b: e.UIR, starts: r }], r: 0 }], i: "[^\\s\\}]" };
  }), e.registerLanguage("objectivec", function (e) {
    var t = { cN: "built_in", b: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+" },
        r = { keyword: "int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN", literal: "false true FALSE TRUE nil YES NO NULL", built_in: "BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once" },
        a = /[a-zA-Z@][a-zA-Z0-9_]*/,
        n = "@interface @class @protocol @implementation";return { aliases: ["mm", "objc", "obj-c"], k: r, l: a, i: "</", c: [t, e.CLCM, e.CBCM, e.CNM, e.QSM, { cN: "string", v: [{ b: '@"', e: '"', i: "\\n", c: [e.BE] }, { b: "'", e: "[^\\\\]'", i: "[^\\\\][^']" }] }, { cN: "meta", b: "#", e: "$", c: [{ cN: "meta-string", v: [{ b: '"', e: '"' }, { b: "<", e: ">" }] }] }, { cN: "class", b: "(" + n.split(" ").join("|") + ")\\b", e: "({|$)", eE: !0, k: n, l: a, c: [e.UTM] }, { b: "\\." + e.UIR, r: 0 }] };
  }), e.registerLanguage("perl", function (e) {
    var t = "getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",
        r = { cN: "subst", b: "[$@]\\{", e: "\\}", k: t },
        a = { b: "->{", e: "}" },
        n = { v: [{ b: /\$\d/ }, { b: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/ }, { b: /[\$%@][^\s\w{]/, r: 0 }] },
        i = [e.BE, r, n],
        s = [n, e.HCM, e.C("^\\=\\w", "\\=cut", { eW: !0 }), a, { cN: "string", c: i, v: [{ b: "q[qwxr]?\\s*\\(", e: "\\)", r: 5 }, { b: "q[qwxr]?\\s*\\[", e: "\\]", r: 5 }, { b: "q[qwxr]?\\s*\\{", e: "\\}", r: 5 }, { b: "q[qwxr]?\\s*\\|", e: "\\|", r: 5 }, { b: "q[qwxr]?\\s*\\<", e: "\\>", r: 5 }, { b: "qw\\s+q", e: "q", r: 5 }, { b: "'", e: "'", c: [e.BE] }, { b: '"', e: '"' }, { b: "`", e: "`", c: [e.BE] }, { b: "{\\w+}", c: [], r: 0 }, { b: "-?\\w+\\s*\\=\\>", c: [], r: 0 }] }, { cN: "number", b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b", r: 0 }, { b: "(\\/\\/|" + e.RSR + "|\\b(split|return|print|reverse|grep)\\b)\\s*", k: "split return print reverse grep", r: 0, c: [e.HCM, { cN: "regexp", b: "(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*", r: 10 }, { cN: "regexp", b: "(m|qr)?/", e: "/[a-z]*", c: [e.BE], r: 0 }] }, { cN: "function", bK: "sub", e: "(\\s*\\(.*?\\))?[;{]", eE: !0, r: 5, c: [e.TM] }, { b: "-\\w\\b", r: 0 }, { b: "^__DATA__$", e: "^__END__$", sL: "mojolicious", c: [{ b: "^@@.*", e: "$", cN: "comment" }] }];return r.c = s, a.c = s, { aliases: ["pl", "pm"], l: /[\w\.]+/, k: t, c: s };
  }), e.registerLanguage("php", function (e) {
    var t = { b: "\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*" },
        r = { cN: "meta", b: /<\?(php)?|\?>/ },
        a = { cN: "string", c: [e.BE, r], v: [{ b: 'b"', e: '"' }, { b: "b'", e: "'" }, e.inherit(e.ASM, { i: null }), e.inherit(e.QSM, { i: null })] },
        n = { v: [e.BNM, e.CNM] };return { aliases: ["php3", "php4", "php5", "php6"], cI: !0, k: "and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally", c: [e.HCM, e.C("//", "$", { c: [r] }), e.C("/\\*", "\\*/", { c: [{ cN: "doctag", b: "@[A-Za-z]+" }] }), e.C("__halt_compiler.+?;", !1, { eW: !0, k: "__halt_compiler", l: e.UIR }), { cN: "string", b: /<<<['"]?\w+['"]?$/, e: /^\w+;?$/, c: [e.BE, { cN: "subst", v: [{ b: /\$\w+/ }, { b: /\{\$/, e: /\}/ }] }] }, r, { cN: "keyword", b: /\$this\b/ }, t, { b: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/ }, { cN: "function", bK: "function", e: /[;{]/, eE: !0, i: "\\$|\\[|%", c: [e.UTM, { cN: "params", b: "\\(", e: "\\)", c: ["self", t, e.CBCM, a, n] }] }, { cN: "class", bK: "class interface", e: "{", eE: !0, i: /[:\(\$"]/, c: [{ bK: "extends implements" }, e.UTM] }, { bK: "namespace", e: ";", i: /[\.']/, c: [e.UTM] }, { bK: "use", e: ";", c: [e.UTM] }, { b: "=>" }, a, n] };
  }), e.registerLanguage("python", function (e) {
    var t = { keyword: "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False", built_in: "Ellipsis NotImplemented" },
        r = { cN: "meta", b: /^(>>>|\.\.\.) / },
        a = { cN: "subst", b: /\{/, e: /\}/, k: t, i: /#/ },
        n = { cN: "string", c: [e.BE], v: [{ b: /(u|b)?r?'''/, e: /'''/, c: [r], r: 10 }, { b: /(u|b)?r?"""/, e: /"""/, c: [r], r: 10 }, { b: /(fr|rf|f)'''/, e: /'''/, c: [r, a] }, { b: /(fr|rf|f)"""/, e: /"""/, c: [r, a] }, { b: /(u|r|ur)'/, e: /'/, r: 10 }, { b: /(u|r|ur)"/, e: /"/, r: 10 }, { b: /(b|br)'/, e: /'/ }, { b: /(b|br)"/, e: /"/ }, { b: /(fr|rf|f)'/, e: /'/, c: [a] }, { b: /(fr|rf|f)"/, e: /"/, c: [a] }, e.ASM, e.QSM] },
        i = { cN: "number", r: 0, v: [{ b: e.BNR + "[lLjJ]?" }, { b: "\\b(0o[0-7]+)[lLjJ]?" }, { b: e.CNR + "[lLjJ]?" }] },
        s = { cN: "params", b: /\(/, e: /\)/, c: ["self", r, i, n] };return a.c = [n, i, r], { aliases: ["py", "gyp"], k: t, i: /(<\/|->|\?)|=>/, c: [r, i, n, e.HCM, { v: [{ cN: "function", bK: "def" }, { cN: "class", bK: "class" }], e: /:/, i: /[${=;\n,]/, c: [e.UTM, s, { b: /->/, eW: !0, k: "None" }] }, { cN: "meta", b: /^[\t ]*@/, e: /$/ }, { b: /\b(print|exec)\(/ }] };
  }), e.registerLanguage("ruby", function (e) {
    var t = "[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",
        r = { keyword: "and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor", literal: "true false nil" },
        a = { cN: "doctag", b: "@[A-Za-z]+" },
        n = { b: "#<", e: ">" },
        i = [e.C("#", "$", { c: [a] }), e.C("^\\=begin", "^\\=end", { c: [a], r: 10 }), e.C("^__END__", "\\n$")],
        s = { cN: "subst", b: "#\\{", e: "}", k: r },
        c = { cN: "string", c: [e.BE, s], v: [{ b: /'/, e: /'/ }, { b: /"/, e: /"/ }, { b: /`/, e: /`/ }, { b: "%[qQwWx]?\\(", e: "\\)" }, { b: "%[qQwWx]?\\[", e: "\\]" }, { b: "%[qQwWx]?{", e: "}" }, { b: "%[qQwWx]?<", e: ">" }, { b: "%[qQwWx]?/", e: "/" }, { b: "%[qQwWx]?%", e: "%" }, { b: "%[qQwWx]?-", e: "-" }, { b: "%[qQwWx]?\\|", e: "\\|" }, { b: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/ }, { b: /<<(-?)\w+$/, e: /^\s*\w+$/ }] },
        o = { cN: "params", b: "\\(", e: "\\)", endsParent: !0, k: r },
        l = [c, n, { cN: "class", bK: "class module", e: "$|;", i: /=/, c: [e.inherit(e.TM, { b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?" }), { b: "<\\s*", c: [{ b: "(" + e.IR + "::)?" + e.IR }] }].concat(i) }, { cN: "function", bK: "def", e: "$|;", c: [e.inherit(e.TM, { b: t }), o].concat(i) }, { b: e.IR + "::" }, { cN: "symbol", b: e.UIR + "(\\!|\\?)?:", r: 0 }, { cN: "symbol", b: ":(?!\\s)", c: [c, { b: t }], r: 0 }, { cN: "number", b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b", r: 0 }, { b: "(\\$\\W)|((\\$|\\@\\@?)(\\w+))" }, { cN: "params", b: /\|/, e: /\|/, k: r }, { b: "(" + e.RSR + "|unless)\\s*", k: "unless", c: [n, { cN: "regexp", c: [e.BE, s], i: /\n/, v: [{ b: "/", e: "/[a-z]*" }, { b: "%r{", e: "}[a-z]*" }, { b: "%r\\(", e: "\\)[a-z]*" }, { b: "%r!", e: "![a-z]*" }, { b: "%r\\[", e: "\\][a-z]*" }] }].concat(i), r: 0 }].concat(i);s.c = l, o.c = l;var u = "[>?]>",
        d = "[\\w#]+\\(\\w+\\):\\d+:\\d+>",
        b = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",
        p = [{ b: /^\s*=>/, starts: { e: "$", c: l } }, { cN: "meta", b: "^(" + u + "|" + d + "|" + b + ")", starts: { e: "$", c: l } }];return { aliases: ["rb", "gemspec", "podspec", "thor", "irb"], k: r, i: /\/\*/, c: i.concat(p).concat(l) };
  }), e.registerLanguage("shell", function (e) {
    return { aliases: ["console"], c: [{ cN: "meta", b: "^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]", starts: { e: "$", sL: "bash" } }] };
  }), e.registerLanguage("sql", function (e) {
    var t = e.C("--", "$");return { cI: !0, i: /[<>{}*#]/, c: [{ bK: "begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment", e: /;/, eW: !0, l: /[\w\.]+/, k: { keyword: "abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select self sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek", literal: "true false null", built_in: "array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text varchar varying void" }, c: [{ cN: "string", b: "'", e: "'", c: [e.BE, { b: "''" }] }, { cN: "string", b: '"', e: '"', c: [e.BE, { b: '""' }] }, { cN: "string", b: "`", e: "`", c: [e.BE] }, e.CNM, e.CBCM, t] }, e.CBCM, t] };
  }), e;
});

/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _remarkableMin = __webpack_require__(6);

var _remarkableMin2 = _interopRequireDefault(_remarkableMin);

var _highlightMin = __webpack_require__(0);

var _highlightMin2 = _interopRequireDefault(_highlightMin);

__webpack_require__(7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var md = new _remarkableMin2.default(); /**
                                         * Sidebar module for load Amber Framework documentation
                                         * using Ajax and Markdown preprocessor.
                                         * By @eliasjpr & @faustinoaq
                                         */

var notFound = "<h1>Documentation not found</h1><img src='/assets/img/404.gif' /><p>We can't load this page, please try reloading or report an issue to <a href='https://github.com/amberframework/online-docs/issues'>documentation repository</a>.</p>";

var host = "https://raw.githubusercontent.com";
var path = "/amberframework/online-docs/master";

$(document).ready(function () {
    var hash = window.location.hash;

    $("footer").addClass('sticky-footer');

    if (hash) {
        goToUrl(document.getElementById(hash.replace("#", '')));
    } else {
        goToUrl(document.getElementById("getting-started"));
    }

    $("a.list-group-item").on("click", function (e) {
        e.preventDefault();
        goToUrl(e.currentTarget);
    });

    $("a[data-sidebar-toggle]").on("click", function (elem) {
        elem.preventDefault();
        var target = elem.currentTarget.dataset.target;
        $("a[data-sidebar-toggle]").toggleClass("hamburger-hide");
        $(target).toggleClass("sidebar-hidden");
        $("#main-content").toggleClass("main-content-full");
    });

    $(window).bind("popstate", function (e) {
        var state = e.originalEvent.state;
        if (state !== null) {
            var url = new URL(host + path + window.location.pathname.replace("/guides", ''));
            loadContent(url.href);
        }
    });

    // Removes empty tags created by TheSaaS theme
    $("a.list-group-item").each(function (i, e) {
        if (/^\s*$/.test($(e).text())) {
            $(e).addClass("d-none");
        }
    });
});

function goToUrl(e) {
    var $e = $(e);

    if ($e.data("toggle") === undefined) {
        var url = new URL(e.href);
        var new_location = '/guides' + url.pathname + url.hash;

        $("a.list-group-item").removeClass("active");
        loadContent(host + path + url.pathname);
        var $parent = $($e.data("parent"));
        $e.addClass("active");
        $parent.addClass("show");
        $parent.parent().addClass("show");

        window.history.pushState({
            slug: new_location,
            url: new_location
        }, 'Amber Docs ' + url.hash, new_location);
    }
}

/**
 * Check blank string and create HTML content.
 * if string is blank then notFound is assigned.
 * @param {string} data
 */
function buildContentFrom(data) {
    if (/^\s*$/.test(data)) {
        return notFound;
    } else {
        return md.render(data);
    }
}

/**
 * Load content from URL to guide content using Ajax.
 * Also shows error message when documentation isn't found.
 * @param {string} contentUrl
 */
function loadContent(contentUrl) {
    var content;
    $("#guide-content").html("<div class='spinner'><div class='cube1'></div><div class='cube2'></div></div>");
    $.get(contentUrl).done(function (data) {
        content = buildContentFrom(data);
        $("#guide-content").html(content);
        $("pre code").addClass("hljs");
        $("pre code").each(function (i, block) {
            _highlightMin2.default.highlightBlock(block);
        });
    }).fail(function (data) {
        $("#guide-content").html(notFound);
    });
};;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! remarkable 1.7.1 https://github.com/jonschlinkert/remarkable @license MIT */
!function (e) {
  if ("object" == ( false ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.Remarkable = e();
  }
}(function () {
  var e;return function t(e, r, n) {
    function s(i, l) {
      if (!r[i]) {
        if (!e[i]) {
          var a = "function" == typeof require && require;if (!l && a) return require(i, !0);if (o) return o(i, !0);var c = new Error("Cannot find module '" + i + "'");throw c.code = "MODULE_NOT_FOUND", c;
        }var u = r[i] = { exports: {} };e[i][0].call(u.exports, function (t) {
          var r = e[i][1][t];return s(r ? r : t);
        }, u, u.exports, t, e, r, n);
      }return r[i].exports;
    }for (var o = "function" == typeof require && require, i = 0; i < n.length; i++) {
      s(n[i]);
    }return s;
  }({ 1: [function (e, t) {
      "use strict";
      t.exports = { Aacute: "Á", aacute: "á", Abreve: "Ă", abreve: "ă", ac: "∾", acd: "∿", acE: "∾̳", Acirc: "Â", acirc: "â", acute: "´", Acy: "А", acy: "а", AElig: "Æ", aelig: "æ", af: "⁡", Afr: "𝔄", afr: "𝔞", Agrave: "À", agrave: "à", alefsym: "ℵ", aleph: "ℵ", Alpha: "Α", alpha: "α", Amacr: "Ā", amacr: "ā", amalg: "⨿", AMP: "&", amp: "&", And: "⩓", and: "∧", andand: "⩕", andd: "⩜", andslope: "⩘", andv: "⩚", ang: "∠", ange: "⦤", angle: "∠", angmsd: "∡", angmsdaa: "⦨", angmsdab: "⦩", angmsdac: "⦪", angmsdad: "⦫", angmsdae: "⦬", angmsdaf: "⦭", angmsdag: "⦮", angmsdah: "⦯", angrt: "∟", angrtvb: "⊾", angrtvbd: "⦝", angsph: "∢", angst: "Å", angzarr: "⍼", Aogon: "Ą", aogon: "ą", Aopf: "𝔸", aopf: "𝕒", ap: "≈", apacir: "⩯", apE: "⩰", ape: "≊", apid: "≋", apos: "'", ApplyFunction: "⁡", approx: "≈", approxeq: "≊", Aring: "Å", aring: "å", Ascr: "𝒜", ascr: "𝒶", Assign: "≔", ast: "*", asymp: "≈", asympeq: "≍", Atilde: "Ã", atilde: "ã", Auml: "Ä", auml: "ä", awconint: "∳", awint: "⨑", backcong: "≌", backepsilon: "϶", backprime: "‵", backsim: "∽", backsimeq: "⋍", Backslash: "∖", Barv: "⫧", barvee: "⊽", Barwed: "⌆", barwed: "⌅", barwedge: "⌅", bbrk: "⎵", bbrktbrk: "⎶", bcong: "≌", Bcy: "Б", bcy: "б", bdquo: "„", becaus: "∵", Because: "∵", because: "∵", bemptyv: "⦰", bepsi: "϶", bernou: "ℬ", Bernoullis: "ℬ", Beta: "Β", beta: "β", beth: "ℶ", between: "≬", Bfr: "𝔅", bfr: "𝔟", bigcap: "⋂", bigcirc: "◯", bigcup: "⋃", bigodot: "⨀", bigoplus: "⨁", bigotimes: "⨂", bigsqcup: "⨆", bigstar: "★", bigtriangledown: "▽", bigtriangleup: "△", biguplus: "⨄", bigvee: "⋁", bigwedge: "⋀", bkarow: "⤍", blacklozenge: "⧫", blacksquare: "▪", blacktriangle: "▴", blacktriangledown: "▾", blacktriangleleft: "◂", blacktriangleright: "▸", blank: "␣", blk12: "▒", blk14: "░", blk34: "▓", block: "█", bne: "=⃥", bnequiv: "≡⃥", bNot: "⫭", bnot: "⌐", Bopf: "𝔹", bopf: "𝕓", bot: "⊥", bottom: "⊥", bowtie: "⋈", boxbox: "⧉", boxDL: "╗", boxDl: "╖", boxdL: "╕", boxdl: "┐", boxDR: "╔", boxDr: "╓", boxdR: "╒", boxdr: "┌", boxH: "═", boxh: "─", boxHD: "╦", boxHd: "╤", boxhD: "╥", boxhd: "┬", boxHU: "╩", boxHu: "╧", boxhU: "╨", boxhu: "┴", boxminus: "⊟", boxplus: "⊞", boxtimes: "⊠", boxUL: "╝", boxUl: "╜", boxuL: "╛", boxul: "┘", boxUR: "╚", boxUr: "╙", boxuR: "╘", boxur: "└", boxV: "║", boxv: "│", boxVH: "╬", boxVh: "╫", boxvH: "╪", boxvh: "┼", boxVL: "╣", boxVl: "╢", boxvL: "╡", boxvl: "┤", boxVR: "╠", boxVr: "╟", boxvR: "╞", boxvr: "├", bprime: "‵", Breve: "˘", breve: "˘", brvbar: "¦", Bscr: "ℬ", bscr: "𝒷", bsemi: "⁏", bsim: "∽", bsime: "⋍", bsol: "\\", bsolb: "⧅", bsolhsub: "⟈", bull: "•", bullet: "•", bump: "≎", bumpE: "⪮", bumpe: "≏", Bumpeq: "≎", bumpeq: "≏", Cacute: "Ć", cacute: "ć", Cap: "⋒", cap: "∩", capand: "⩄", capbrcup: "⩉", capcap: "⩋", capcup: "⩇", capdot: "⩀", CapitalDifferentialD: "ⅅ", caps: "∩︀", caret: "⁁", caron: "ˇ", Cayleys: "ℭ", ccaps: "⩍", Ccaron: "Č", ccaron: "č", Ccedil: "Ç", ccedil: "ç", Ccirc: "Ĉ", ccirc: "ĉ", Cconint: "∰", ccups: "⩌", ccupssm: "⩐", Cdot: "Ċ", cdot: "ċ", cedil: "¸", Cedilla: "¸", cemptyv: "⦲", cent: "¢", CenterDot: "·", centerdot: "·", Cfr: "ℭ", cfr: "𝔠", CHcy: "Ч", chcy: "ч", check: "✓", checkmark: "✓", Chi: "Χ", chi: "χ", cir: "○", circ: "ˆ", circeq: "≗", circlearrowleft: "↺", circlearrowright: "↻", circledast: "⊛", circledcirc: "⊚", circleddash: "⊝", CircleDot: "⊙", circledR: "®", circledS: "Ⓢ", CircleMinus: "⊖", CirclePlus: "⊕", CircleTimes: "⊗", cirE: "⧃", cire: "≗", cirfnint: "⨐", cirmid: "⫯", cirscir: "⧂", ClockwiseContourIntegral: "∲", CloseCurlyDoubleQuote: "”", CloseCurlyQuote: "’", clubs: "♣", clubsuit: "♣", Colon: "∷", colon: ":", Colone: "⩴", colone: "≔", coloneq: "≔", comma: ",", commat: "@", comp: "∁", compfn: "∘", complement: "∁", complexes: "ℂ", cong: "≅", congdot: "⩭", Congruent: "≡", Conint: "∯", conint: "∮", ContourIntegral: "∮", Copf: "ℂ", copf: "𝕔", coprod: "∐", Coproduct: "∐", COPY: "©", copy: "©", copysr: "℗", CounterClockwiseContourIntegral: "∳", crarr: "↵", Cross: "⨯", cross: "✗", Cscr: "𝒞", cscr: "𝒸", csub: "⫏", csube: "⫑", csup: "⫐", csupe: "⫒", ctdot: "⋯", cudarrl: "⤸", cudarrr: "⤵", cuepr: "⋞", cuesc: "⋟", cularr: "↶", cularrp: "⤽", Cup: "⋓", cup: "∪", cupbrcap: "⩈", CupCap: "≍", cupcap: "⩆", cupcup: "⩊", cupdot: "⊍", cupor: "⩅", cups: "∪︀", curarr: "↷", curarrm: "⤼", curlyeqprec: "⋞", curlyeqsucc: "⋟", curlyvee: "⋎", curlywedge: "⋏", curren: "¤", curvearrowleft: "↶", curvearrowright: "↷", cuvee: "⋎", cuwed: "⋏", cwconint: "∲", cwint: "∱", cylcty: "⌭", Dagger: "‡", dagger: "†", daleth: "ℸ", Darr: "↡", dArr: "⇓", darr: "↓", dash: "‐", Dashv: "⫤", dashv: "⊣", dbkarow: "⤏", dblac: "˝", Dcaron: "Ď", dcaron: "ď", Dcy: "Д", dcy: "д", DD: "ⅅ", dd: "ⅆ", ddagger: "‡", ddarr: "⇊", DDotrahd: "⤑", ddotseq: "⩷", deg: "°", Del: "∇", Delta: "Δ", delta: "δ", demptyv: "⦱", dfisht: "⥿", Dfr: "𝔇", dfr: "𝔡", dHar: "⥥", dharl: "⇃", dharr: "⇂", DiacriticalAcute: "´", DiacriticalDot: "˙", DiacriticalDoubleAcute: "˝", DiacriticalGrave: "`", DiacriticalTilde: "˜", diam: "⋄", Diamond: "⋄", diamond: "⋄", diamondsuit: "♦", diams: "♦", die: "¨", DifferentialD: "ⅆ", digamma: "ϝ", disin: "⋲", div: "÷", divide: "÷", divideontimes: "⋇", divonx: "⋇", DJcy: "Ђ", djcy: "ђ", dlcorn: "⌞", dlcrop: "⌍", dollar: "$", Dopf: "𝔻", dopf: "𝕕", Dot: "¨", dot: "˙", DotDot: "⃜", doteq: "≐", doteqdot: "≑", DotEqual: "≐", dotminus: "∸", dotplus: "∔", dotsquare: "⊡", doublebarwedge: "⌆", DoubleContourIntegral: "∯", DoubleDot: "¨", DoubleDownArrow: "⇓", DoubleLeftArrow: "⇐", DoubleLeftRightArrow: "⇔", DoubleLeftTee: "⫤", DoubleLongLeftArrow: "⟸", DoubleLongLeftRightArrow: "⟺", DoubleLongRightArrow: "⟹", DoubleRightArrow: "⇒", DoubleRightTee: "⊨", DoubleUpArrow: "⇑", DoubleUpDownArrow: "⇕", DoubleVerticalBar: "∥", DownArrow: "↓", Downarrow: "⇓", downarrow: "↓", DownArrowBar: "⤓", DownArrowUpArrow: "⇵", DownBreve: "̑", downdownarrows: "⇊", downharpoonleft: "⇃", downharpoonright: "⇂", DownLeftRightVector: "⥐", DownLeftTeeVector: "⥞", DownLeftVector: "↽", DownLeftVectorBar: "⥖", DownRightTeeVector: "⥟", DownRightVector: "⇁", DownRightVectorBar: "⥗", DownTee: "⊤", DownTeeArrow: "↧", drbkarow: "⤐", drcorn: "⌟", drcrop: "⌌", Dscr: "𝒟", dscr: "𝒹", DScy: "Ѕ", dscy: "ѕ", dsol: "⧶", Dstrok: "Đ", dstrok: "đ", dtdot: "⋱", dtri: "▿", dtrif: "▾", duarr: "⇵", duhar: "⥯", dwangle: "⦦", DZcy: "Џ", dzcy: "џ", dzigrarr: "⟿", Eacute: "É", eacute: "é", easter: "⩮", Ecaron: "Ě", ecaron: "ě", ecir: "≖", Ecirc: "Ê", ecirc: "ê", ecolon: "≕", Ecy: "Э", ecy: "э", eDDot: "⩷", Edot: "Ė", eDot: "≑", edot: "ė", ee: "ⅇ", efDot: "≒", Efr: "𝔈", efr: "𝔢", eg: "⪚", Egrave: "È", egrave: "è", egs: "⪖", egsdot: "⪘", el: "⪙", Element: "∈", elinters: "⏧", ell: "ℓ", els: "⪕", elsdot: "⪗", Emacr: "Ē", emacr: "ē", empty: "∅", emptyset: "∅", EmptySmallSquare: "◻", emptyv: "∅", EmptyVerySmallSquare: "▫", emsp: " ", emsp13: " ", emsp14: " ", ENG: "Ŋ", eng: "ŋ", ensp: " ", Eogon: "Ę", eogon: "ę", Eopf: "𝔼", eopf: "𝕖", epar: "⋕", eparsl: "⧣", eplus: "⩱", epsi: "ε", Epsilon: "Ε", epsilon: "ε", epsiv: "ϵ", eqcirc: "≖", eqcolon: "≕", eqsim: "≂", eqslantgtr: "⪖", eqslantless: "⪕", Equal: "⩵", equals: "=", EqualTilde: "≂", equest: "≟", Equilibrium: "⇌", equiv: "≡", equivDD: "⩸", eqvparsl: "⧥", erarr: "⥱", erDot: "≓", Escr: "ℰ", escr: "ℯ", esdot: "≐", Esim: "⩳", esim: "≂", Eta: "Η", eta: "η", ETH: "Ð", eth: "ð", Euml: "Ë", euml: "ë", euro: "€", excl: "!", exist: "∃", Exists: "∃", expectation: "ℰ", ExponentialE: "ⅇ", exponentiale: "ⅇ", fallingdotseq: "≒", Fcy: "Ф", fcy: "ф", female: "♀", ffilig: "ﬃ", fflig: "ﬀ", ffllig: "ﬄ", Ffr: "𝔉", ffr: "𝔣", filig: "ﬁ", FilledSmallSquare: "◼", FilledVerySmallSquare: "▪", fjlig: "fj", flat: "♭", fllig: "ﬂ", fltns: "▱", fnof: "ƒ", Fopf: "𝔽", fopf: "𝕗", ForAll: "∀", forall: "∀", fork: "⋔", forkv: "⫙", Fouriertrf: "ℱ", fpartint: "⨍", frac12: "½", frac13: "⅓", frac14: "¼", frac15: "⅕", frac16: "⅙", frac18: "⅛", frac23: "⅔", frac25: "⅖", frac34: "¾", frac35: "⅗", frac38: "⅜", frac45: "⅘", frac56: "⅚", frac58: "⅝", frac78: "⅞", frasl: "⁄", frown: "⌢", Fscr: "ℱ", fscr: "𝒻", gacute: "ǵ", Gamma: "Γ", gamma: "γ", Gammad: "Ϝ", gammad: "ϝ", gap: "⪆", Gbreve: "Ğ", gbreve: "ğ", Gcedil: "Ģ", Gcirc: "Ĝ", gcirc: "ĝ", Gcy: "Г", gcy: "г", Gdot: "Ġ", gdot: "ġ", gE: "≧", ge: "≥", gEl: "⪌", gel: "⋛", geq: "≥", geqq: "≧", geqslant: "⩾", ges: "⩾", gescc: "⪩", gesdot: "⪀", gesdoto: "⪂", gesdotol: "⪄", gesl: "⋛︀", gesles: "⪔", Gfr: "𝔊", gfr: "𝔤", Gg: "⋙", gg: "≫", ggg: "⋙", gimel: "ℷ", GJcy: "Ѓ", gjcy: "ѓ", gl: "≷", gla: "⪥", glE: "⪒", glj: "⪤", gnap: "⪊", gnapprox: "⪊", gnE: "≩", gne: "⪈", gneq: "⪈", gneqq: "≩", gnsim: "⋧", Gopf: "𝔾", gopf: "𝕘", grave: "`", GreaterEqual: "≥", GreaterEqualLess: "⋛", GreaterFullEqual: "≧", GreaterGreater: "⪢", GreaterLess: "≷", GreaterSlantEqual: "⩾", GreaterTilde: "≳", Gscr: "𝒢", gscr: "ℊ", gsim: "≳", gsime: "⪎", gsiml: "⪐", GT: ">", Gt: "≫", gt: ">", gtcc: "⪧", gtcir: "⩺", gtdot: "⋗", gtlPar: "⦕", gtquest: "⩼", gtrapprox: "⪆", gtrarr: "⥸", gtrdot: "⋗", gtreqless: "⋛", gtreqqless: "⪌", gtrless: "≷", gtrsim: "≳", gvertneqq: "≩︀", gvnE: "≩︀", Hacek: "ˇ", hairsp: " ", half: "½", hamilt: "ℋ", HARDcy: "Ъ", hardcy: "ъ", hArr: "⇔", harr: "↔", harrcir: "⥈", harrw: "↭", Hat: "^", hbar: "ℏ", Hcirc: "Ĥ", hcirc: "ĥ", hearts: "♥", heartsuit: "♥", hellip: "…", hercon: "⊹", Hfr: "ℌ", hfr: "𝔥", HilbertSpace: "ℋ", hksearow: "⤥", hkswarow: "⤦", hoarr: "⇿", homtht: "∻", hookleftarrow: "↩", hookrightarrow: "↪", Hopf: "ℍ", hopf: "𝕙", horbar: "―", HorizontalLine: "─", Hscr: "ℋ", hscr: "𝒽", hslash: "ℏ", Hstrok: "Ħ", hstrok: "ħ", HumpDownHump: "≎", HumpEqual: "≏", hybull: "⁃", hyphen: "‐", Iacute: "Í", iacute: "í", ic: "⁣", Icirc: "Î", icirc: "î", Icy: "И", icy: "и", Idot: "İ", IEcy: "Е", iecy: "е", iexcl: "¡", iff: "⇔", Ifr: "ℑ", ifr: "𝔦", Igrave: "Ì", igrave: "ì", ii: "ⅈ", iiiint: "⨌", iiint: "∭", iinfin: "⧜", iiota: "℩", IJlig: "Ĳ", ijlig: "ĳ", Im: "ℑ", Imacr: "Ī", imacr: "ī", image: "ℑ", ImaginaryI: "ⅈ", imagline: "ℐ", imagpart: "ℑ", imath: "ı", imof: "⊷", imped: "Ƶ", Implies: "⇒", "in": "∈", incare: "℅", infin: "∞", infintie: "⧝", inodot: "ı", Int: "∬", "int": "∫", intcal: "⊺", integers: "ℤ", Integral: "∫", intercal: "⊺", Intersection: "⋂", intlarhk: "⨗", intprod: "⨼", InvisibleComma: "⁣", InvisibleTimes: "⁢", IOcy: "Ё", iocy: "ё", Iogon: "Į", iogon: "į", Iopf: "𝕀", iopf: "𝕚", Iota: "Ι", iota: "ι", iprod: "⨼", iquest: "¿", Iscr: "ℐ", iscr: "𝒾", isin: "∈", isindot: "⋵", isinE: "⋹", isins: "⋴", isinsv: "⋳", isinv: "∈", it: "⁢", Itilde: "Ĩ", itilde: "ĩ", Iukcy: "І", iukcy: "і", Iuml: "Ï", iuml: "ï", Jcirc: "Ĵ", jcirc: "ĵ", Jcy: "Й", jcy: "й", Jfr: "𝔍", jfr: "𝔧", jmath: "ȷ", Jopf: "𝕁", jopf: "𝕛", Jscr: "𝒥", jscr: "𝒿", Jsercy: "Ј", jsercy: "ј", Jukcy: "Є", jukcy: "є", Kappa: "Κ", kappa: "κ", kappav: "ϰ", Kcedil: "Ķ", kcedil: "ķ", Kcy: "К", kcy: "к", Kfr: "𝔎", kfr: "𝔨", kgreen: "ĸ", KHcy: "Х", khcy: "х", KJcy: "Ќ", kjcy: "ќ", Kopf: "𝕂", kopf: "𝕜", Kscr: "𝒦", kscr: "𝓀", lAarr: "⇚", Lacute: "Ĺ", lacute: "ĺ", laemptyv: "⦴", lagran: "ℒ", Lambda: "Λ", lambda: "λ", Lang: "⟪", lang: "⟨", langd: "⦑", langle: "⟨", lap: "⪅", Laplacetrf: "ℒ", laquo: "«", Larr: "↞", lArr: "⇐", larr: "←", larrb: "⇤", larrbfs: "⤟", larrfs: "⤝", larrhk: "↩", larrlp: "↫", larrpl: "⤹", larrsim: "⥳", larrtl: "↢", lat: "⪫", lAtail: "⤛", latail: "⤙", late: "⪭", lates: "⪭︀", lBarr: "⤎", lbarr: "⤌", lbbrk: "❲", lbrace: "{", lbrack: "[", lbrke: "⦋", lbrksld: "⦏", lbrkslu: "⦍", Lcaron: "Ľ", lcaron: "ľ", Lcedil: "Ļ", lcedil: "ļ", lceil: "⌈", lcub: "{", Lcy: "Л", lcy: "л", ldca: "⤶", ldquo: "“", ldquor: "„", ldrdhar: "⥧", ldrushar: "⥋", ldsh: "↲", lE: "≦", le: "≤", LeftAngleBracket: "⟨", LeftArrow: "←", Leftarrow: "⇐", leftarrow: "←", LeftArrowBar: "⇤", LeftArrowRightArrow: "⇆", leftarrowtail: "↢", LeftCeiling: "⌈", LeftDoubleBracket: "⟦", LeftDownTeeVector: "⥡", LeftDownVector: "⇃", LeftDownVectorBar: "⥙", LeftFloor: "⌊", leftharpoondown: "↽", leftharpoonup: "↼", leftleftarrows: "⇇", LeftRightArrow: "↔", Leftrightarrow: "⇔", leftrightarrow: "↔", leftrightarrows: "⇆", leftrightharpoons: "⇋", leftrightsquigarrow: "↭", LeftRightVector: "⥎", LeftTee: "⊣", LeftTeeArrow: "↤", LeftTeeVector: "⥚", leftthreetimes: "⋋", LeftTriangle: "⊲", LeftTriangleBar: "⧏", LeftTriangleEqual: "⊴", LeftUpDownVector: "⥑", LeftUpTeeVector: "⥠", LeftUpVector: "↿", LeftUpVectorBar: "⥘", LeftVector: "↼", LeftVectorBar: "⥒", lEg: "⪋", leg: "⋚", leq: "≤", leqq: "≦", leqslant: "⩽", les: "⩽", lescc: "⪨", lesdot: "⩿", lesdoto: "⪁", lesdotor: "⪃", lesg: "⋚︀", lesges: "⪓", lessapprox: "⪅", lessdot: "⋖", lesseqgtr: "⋚", lesseqqgtr: "⪋", LessEqualGreater: "⋚", LessFullEqual: "≦", LessGreater: "≶", lessgtr: "≶", LessLess: "⪡", lesssim: "≲", LessSlantEqual: "⩽", LessTilde: "≲", lfisht: "⥼", lfloor: "⌊", Lfr: "𝔏", lfr: "𝔩", lg: "≶", lgE: "⪑", lHar: "⥢", lhard: "↽", lharu: "↼", lharul: "⥪", lhblk: "▄", LJcy: "Љ", ljcy: "љ", Ll: "⋘", ll: "≪", llarr: "⇇", llcorner: "⌞", Lleftarrow: "⇚", llhard: "⥫", lltri: "◺", Lmidot: "Ŀ", lmidot: "ŀ", lmoust: "⎰", lmoustache: "⎰", lnap: "⪉", lnapprox: "⪉", lnE: "≨", lne: "⪇", lneq: "⪇", lneqq: "≨", lnsim: "⋦", loang: "⟬", loarr: "⇽", lobrk: "⟦", LongLeftArrow: "⟵", Longleftarrow: "⟸", longleftarrow: "⟵", LongLeftRightArrow: "⟷", Longleftrightarrow: "⟺", longleftrightarrow: "⟷", longmapsto: "⟼", LongRightArrow: "⟶", Longrightarrow: "⟹", longrightarrow: "⟶", looparrowleft: "↫", looparrowright: "↬", lopar: "⦅", Lopf: "𝕃", lopf: "𝕝", loplus: "⨭", lotimes: "⨴", lowast: "∗", lowbar: "_", LowerLeftArrow: "↙", LowerRightArrow: "↘", loz: "◊", lozenge: "◊", lozf: "⧫", lpar: "(", lparlt: "⦓", lrarr: "⇆", lrcorner: "⌟", lrhar: "⇋", lrhard: "⥭", lrm: "‎", lrtri: "⊿", lsaquo: "‹", Lscr: "ℒ", lscr: "𝓁", Lsh: "↰", lsh: "↰", lsim: "≲", lsime: "⪍", lsimg: "⪏", lsqb: "[", lsquo: "‘", lsquor: "‚", Lstrok: "Ł", lstrok: "ł", LT: "<", Lt: "≪", lt: "<", ltcc: "⪦", ltcir: "⩹", ltdot: "⋖", lthree: "⋋", ltimes: "⋉", ltlarr: "⥶", ltquest: "⩻", ltri: "◃", ltrie: "⊴", ltrif: "◂", ltrPar: "⦖", lurdshar: "⥊", luruhar: "⥦", lvertneqq: "≨︀", lvnE: "≨︀", macr: "¯", male: "♂", malt: "✠", maltese: "✠", Map: "⤅", map: "↦", mapsto: "↦", mapstodown: "↧", mapstoleft: "↤", mapstoup: "↥", marker: "▮", mcomma: "⨩", Mcy: "М", mcy: "м", mdash: "—", mDDot: "∺", measuredangle: "∡", MediumSpace: " ", Mellintrf: "ℳ", Mfr: "𝔐", mfr: "𝔪", mho: "℧", micro: "µ", mid: "∣", midast: "*", midcir: "⫰", middot: "·", minus: "−", minusb: "⊟", minusd: "∸", minusdu: "⨪", MinusPlus: "∓", mlcp: "⫛", mldr: "…", mnplus: "∓", models: "⊧", Mopf: "𝕄", mopf: "𝕞", mp: "∓", Mscr: "ℳ", mscr: "𝓂", mstpos: "∾", Mu: "Μ", mu: "μ", multimap: "⊸", mumap: "⊸", nabla: "∇", Nacute: "Ń", nacute: "ń", nang: "∠⃒", nap: "≉", napE: "⩰̸", napid: "≋̸", napos: "ŉ", napprox: "≉", natur: "♮", natural: "♮", naturals: "ℕ", nbsp: " ", nbump: "≎̸", nbumpe: "≏̸", ncap: "⩃", Ncaron: "Ň", ncaron: "ň", Ncedil: "Ņ", ncedil: "ņ", ncong: "≇", ncongdot: "⩭̸", ncup: "⩂", Ncy: "Н", ncy: "н", ndash: "–", ne: "≠", nearhk: "⤤", neArr: "⇗", nearr: "↗", nearrow: "↗", nedot: "≐̸", NegativeMediumSpace: "​", NegativeThickSpace: "​", NegativeThinSpace: "​", NegativeVeryThinSpace: "​", nequiv: "≢", nesear: "⤨", nesim: "≂̸", NestedGreaterGreater: "≫", NestedLessLess: "≪", NewLine: "\n", nexist: "∄", nexists: "∄", Nfr: "𝔑", nfr: "𝔫", ngE: "≧̸", nge: "≱", ngeq: "≱", ngeqq: "≧̸", ngeqslant: "⩾̸", nges: "⩾̸", nGg: "⋙̸", ngsim: "≵", nGt: "≫⃒", ngt: "≯", ngtr: "≯", nGtv: "≫̸", nhArr: "⇎", nharr: "↮", nhpar: "⫲", ni: "∋", nis: "⋼", nisd: "⋺", niv: "∋", NJcy: "Њ", njcy: "њ", nlArr: "⇍", nlarr: "↚", nldr: "‥", nlE: "≦̸", nle: "≰", nLeftarrow: "⇍", nleftarrow: "↚", nLeftrightarrow: "⇎", nleftrightarrow: "↮", nleq: "≰", nleqq: "≦̸", nleqslant: "⩽̸", nles: "⩽̸", nless: "≮", nLl: "⋘̸", nlsim: "≴", nLt: "≪⃒", nlt: "≮", nltri: "⋪", nltrie: "⋬", nLtv: "≪̸", nmid: "∤", NoBreak: "⁠", NonBreakingSpace: " ", Nopf: "ℕ", nopf: "𝕟", Not: "⫬", not: "¬", NotCongruent: "≢", NotCupCap: "≭", NotDoubleVerticalBar: "∦", NotElement: "∉", NotEqual: "≠", NotEqualTilde: "≂̸", NotExists: "∄", NotGreater: "≯", NotGreaterEqual: "≱", NotGreaterFullEqual: "≧̸", NotGreaterGreater: "≫̸", NotGreaterLess: "≹", NotGreaterSlantEqual: "⩾̸", NotGreaterTilde: "≵", NotHumpDownHump: "≎̸", NotHumpEqual: "≏̸", notin: "∉", notindot: "⋵̸", notinE: "⋹̸", notinva: "∉", notinvb: "⋷", notinvc: "⋶", NotLeftTriangle: "⋪", NotLeftTriangleBar: "⧏̸", NotLeftTriangleEqual: "⋬", NotLess: "≮", NotLessEqual: "≰", NotLessGreater: "≸", NotLessLess: "≪̸", NotLessSlantEqual: "⩽̸", NotLessTilde: "≴", NotNestedGreaterGreater: "⪢̸", NotNestedLessLess: "⪡̸", notni: "∌", notniva: "∌", notnivb: "⋾", notnivc: "⋽", NotPrecedes: "⊀", NotPrecedesEqual: "⪯̸", NotPrecedesSlantEqual: "⋠", NotReverseElement: "∌", NotRightTriangle: "⋫", NotRightTriangleBar: "⧐̸", NotRightTriangleEqual: "⋭", NotSquareSubset: "⊏̸", NotSquareSubsetEqual: "⋢", NotSquareSuperset: "⊐̸", NotSquareSupersetEqual: "⋣", NotSubset: "⊂⃒", NotSubsetEqual: "⊈", NotSucceeds: "⊁", NotSucceedsEqual: "⪰̸", NotSucceedsSlantEqual: "⋡", NotSucceedsTilde: "≿̸", NotSuperset: "⊃⃒", NotSupersetEqual: "⊉", NotTilde: "≁", NotTildeEqual: "≄", NotTildeFullEqual: "≇", NotTildeTilde: "≉", NotVerticalBar: "∤", npar: "∦", nparallel: "∦", nparsl: "⫽⃥", npart: "∂̸", npolint: "⨔", npr: "⊀", nprcue: "⋠", npre: "⪯̸", nprec: "⊀", npreceq: "⪯̸", nrArr: "⇏", nrarr: "↛", nrarrc: "⤳̸", nrarrw: "↝̸", nRightarrow: "⇏", nrightarrow: "↛", nrtri: "⋫", nrtrie: "⋭", nsc: "⊁", nsccue: "⋡", nsce: "⪰̸", Nscr: "𝒩", nscr: "𝓃", nshortmid: "∤", nshortparallel: "∦", nsim: "≁", nsime: "≄", nsimeq: "≄", nsmid: "∤", nspar: "∦", nsqsube: "⋢", nsqsupe: "⋣", nsub: "⊄", nsubE: "⫅̸", nsube: "⊈", nsubset: "⊂⃒", nsubseteq: "⊈", nsubseteqq: "⫅̸", nsucc: "⊁", nsucceq: "⪰̸", nsup: "⊅", nsupE: "⫆̸", nsupe: "⊉", nsupset: "⊃⃒", nsupseteq: "⊉", nsupseteqq: "⫆̸", ntgl: "≹", Ntilde: "Ñ", ntilde: "ñ", ntlg: "≸", ntriangleleft: "⋪", ntrianglelefteq: "⋬", ntriangleright: "⋫", ntrianglerighteq: "⋭", Nu: "Ν", nu: "ν", num: "#", numero: "№", numsp: " ", nvap: "≍⃒", nVDash: "⊯", nVdash: "⊮", nvDash: "⊭", nvdash: "⊬", nvge: "≥⃒", nvgt: ">⃒", nvHarr: "⤄", nvinfin: "⧞", nvlArr: "⤂", nvle: "≤⃒", nvlt: "<⃒", nvltrie: "⊴⃒", nvrArr: "⤃", nvrtrie: "⊵⃒", nvsim: "∼⃒", nwarhk: "⤣", nwArr: "⇖", nwarr: "↖", nwarrow: "↖", nwnear: "⤧", Oacute: "Ó", oacute: "ó", oast: "⊛", ocir: "⊚", Ocirc: "Ô", ocirc: "ô", Ocy: "О", ocy: "о", odash: "⊝", Odblac: "Ő", odblac: "ő", odiv: "⨸", odot: "⊙", odsold: "⦼", OElig: "Œ", oelig: "œ", ofcir: "⦿", Ofr: "𝔒", ofr: "𝔬", ogon: "˛", Ograve: "Ò", ograve: "ò", ogt: "⧁", ohbar: "⦵", ohm: "Ω", oint: "∮", olarr: "↺", olcir: "⦾", olcross: "⦻", oline: "‾", olt: "⧀", Omacr: "Ō", omacr: "ō", Omega: "Ω", omega: "ω", Omicron: "Ο", omicron: "ο", omid: "⦶", ominus: "⊖", Oopf: "𝕆", oopf: "𝕠", opar: "⦷", OpenCurlyDoubleQuote: "“", OpenCurlyQuote: "‘", operp: "⦹", oplus: "⊕", Or: "⩔", or: "∨", orarr: "↻", ord: "⩝", order: "ℴ", orderof: "ℴ", ordf: "ª", ordm: "º", origof: "⊶", oror: "⩖", orslope: "⩗", orv: "⩛", oS: "Ⓢ", Oscr: "𝒪", oscr: "ℴ", Oslash: "Ø", oslash: "ø", osol: "⊘", Otilde: "Õ", otilde: "õ", Otimes: "⨷", otimes: "⊗", otimesas: "⨶", Ouml: "Ö", ouml: "ö", ovbar: "⌽", OverBar: "‾", OverBrace: "⏞", OverBracket: "⎴", OverParenthesis: "⏜", par: "∥", para: "¶", parallel: "∥", parsim: "⫳", parsl: "⫽", part: "∂", PartialD: "∂", Pcy: "П", pcy: "п", percnt: "%", period: ".", permil: "‰", perp: "⊥", pertenk: "‱", Pfr: "𝔓", pfr: "𝔭", Phi: "Φ", phi: "φ", phiv: "ϕ", phmmat: "ℳ", phone: "☎", Pi: "Π", pi: "π", pitchfork: "⋔", piv: "ϖ", planck: "ℏ", planckh: "ℎ", plankv: "ℏ", plus: "+", plusacir: "⨣", plusb: "⊞", pluscir: "⨢", plusdo: "∔", plusdu: "⨥", pluse: "⩲", PlusMinus: "±", plusmn: "±", plussim: "⨦", plustwo: "⨧", pm: "±", Poincareplane: "ℌ", pointint: "⨕", Popf: "ℙ", popf: "𝕡", pound: "£", Pr: "⪻", pr: "≺", prap: "⪷", prcue: "≼", prE: "⪳", pre: "⪯", prec: "≺", precapprox: "⪷", preccurlyeq: "≼", Precedes: "≺", PrecedesEqual: "⪯", PrecedesSlantEqual: "≼", PrecedesTilde: "≾", preceq: "⪯", precnapprox: "⪹", precneqq: "⪵", precnsim: "⋨", precsim: "≾", Prime: "″", prime: "′", primes: "ℙ", prnap: "⪹", prnE: "⪵", prnsim: "⋨", prod: "∏", Product: "∏", profalar: "⌮", profline: "⌒", profsurf: "⌓", prop: "∝", Proportion: "∷", Proportional: "∝", propto: "∝", prsim: "≾", prurel: "⊰", Pscr: "𝒫", pscr: "𝓅", Psi: "Ψ", psi: "ψ", puncsp: " ", Qfr: "𝔔", qfr: "𝔮", qint: "⨌", Qopf: "ℚ", qopf: "𝕢", qprime: "⁗", Qscr: "𝒬", qscr: "𝓆", quaternions: "ℍ", quatint: "⨖", quest: "?", questeq: "≟", QUOT: '"', quot: '"', rAarr: "⇛", race: "∽̱", Racute: "Ŕ", racute: "ŕ", radic: "√", raemptyv: "⦳", Rang: "⟫", rang: "⟩", rangd: "⦒", range: "⦥", rangle: "⟩", raquo: "»", Rarr: "↠", rArr: "⇒", rarr: "→", rarrap: "⥵", rarrb: "⇥", rarrbfs: "⤠", rarrc: "⤳", rarrfs: "⤞", rarrhk: "↪", rarrlp: "↬", rarrpl: "⥅", rarrsim: "⥴", Rarrtl: "⤖", rarrtl: "↣", rarrw: "↝", rAtail: "⤜", ratail: "⤚", ratio: "∶", rationals: "ℚ", RBarr: "⤐", rBarr: "⤏", rbarr: "⤍", rbbrk: "❳", rbrace: "}", rbrack: "]", rbrke: "⦌", rbrksld: "⦎", rbrkslu: "⦐", Rcaron: "Ř", rcaron: "ř", Rcedil: "Ŗ", rcedil: "ŗ", rceil: "⌉", rcub: "}", Rcy: "Р", rcy: "р", rdca: "⤷", rdldhar: "⥩", rdquo: "”", rdquor: "”", rdsh: "↳", Re: "ℜ", real: "ℜ", realine: "ℛ", realpart: "ℜ", reals: "ℝ", rect: "▭", REG: "®", reg: "®", ReverseElement: "∋", ReverseEquilibrium: "⇋", ReverseUpEquilibrium: "⥯", rfisht: "⥽", rfloor: "⌋", Rfr: "ℜ", rfr: "𝔯", rHar: "⥤", rhard: "⇁", rharu: "⇀", rharul: "⥬", Rho: "Ρ", rho: "ρ", rhov: "ϱ", RightAngleBracket: "⟩", RightArrow: "→", Rightarrow: "⇒", rightarrow: "→", RightArrowBar: "⇥", RightArrowLeftArrow: "⇄", rightarrowtail: "↣", RightCeiling: "⌉", RightDoubleBracket: "⟧", RightDownTeeVector: "⥝", RightDownVector: "⇂", RightDownVectorBar: "⥕", RightFloor: "⌋", rightharpoondown: "⇁", rightharpoonup: "⇀", rightleftarrows: "⇄", rightleftharpoons: "⇌", rightrightarrows: "⇉", rightsquigarrow: "↝", RightTee: "⊢", RightTeeArrow: "↦", RightTeeVector: "⥛", rightthreetimes: "⋌", RightTriangle: "⊳", RightTriangleBar: "⧐", RightTriangleEqual: "⊵", RightUpDownVector: "⥏", RightUpTeeVector: "⥜", RightUpVector: "↾", RightUpVectorBar: "⥔", RightVector: "⇀", RightVectorBar: "⥓", ring: "˚", risingdotseq: "≓", rlarr: "⇄", rlhar: "⇌", rlm: "‏", rmoust: "⎱", rmoustache: "⎱", rnmid: "⫮", roang: "⟭", roarr: "⇾", robrk: "⟧", ropar: "⦆", Ropf: "ℝ", ropf: "𝕣", roplus: "⨮", rotimes: "⨵", RoundImplies: "⥰", rpar: ")", rpargt: "⦔", rppolint: "⨒", rrarr: "⇉", Rrightarrow: "⇛", rsaquo: "›", Rscr: "ℛ", rscr: "𝓇", Rsh: "↱", rsh: "↱", rsqb: "]", rsquo: "’", rsquor: "’", rthree: "⋌", rtimes: "⋊", rtri: "▹", rtrie: "⊵", rtrif: "▸", rtriltri: "⧎", RuleDelayed: "⧴", ruluhar: "⥨", rx: "℞", Sacute: "Ś", sacute: "ś", sbquo: "‚", Sc: "⪼", sc: "≻", scap: "⪸", Scaron: "Š", scaron: "š", sccue: "≽", scE: "⪴", sce: "⪰", Scedil: "Ş", scedil: "ş", Scirc: "Ŝ", scirc: "ŝ", scnap: "⪺", scnE: "⪶", scnsim: "⋩", scpolint: "⨓", scsim: "≿", Scy: "С", scy: "с", sdot: "⋅", sdotb: "⊡", sdote: "⩦", searhk: "⤥", seArr: "⇘", searr: "↘", searrow: "↘", sect: "§", semi: ";", seswar: "⤩", setminus: "∖", setmn: "∖", sext: "✶", Sfr: "𝔖", sfr: "𝔰", sfrown: "⌢", sharp: "♯", SHCHcy: "Щ", shchcy: "щ", SHcy: "Ш", shcy: "ш", ShortDownArrow: "↓", ShortLeftArrow: "←", shortmid: "∣", shortparallel: "∥", ShortRightArrow: "→", ShortUpArrow: "↑", shy: "­", Sigma: "Σ", sigma: "σ", sigmaf: "ς", sigmav: "ς", sim: "∼", simdot: "⩪", sime: "≃", simeq: "≃", simg: "⪞", simgE: "⪠", siml: "⪝", simlE: "⪟", simne: "≆", simplus: "⨤", simrarr: "⥲", slarr: "←", SmallCircle: "∘", smallsetminus: "∖", smashp: "⨳", smeparsl: "⧤", smid: "∣", smile: "⌣", smt: "⪪", smte: "⪬", smtes: "⪬︀", SOFTcy: "Ь", softcy: "ь", sol: "/", solb: "⧄", solbar: "⌿", Sopf: "𝕊", sopf: "𝕤", spades: "♠", spadesuit: "♠", spar: "∥", sqcap: "⊓", sqcaps: "⊓︀", sqcup: "⊔", sqcups: "⊔︀", Sqrt: "√", sqsub: "⊏", sqsube: "⊑", sqsubset: "⊏", sqsubseteq: "⊑", sqsup: "⊐", sqsupe: "⊒", sqsupset: "⊐", sqsupseteq: "⊒", squ: "□", Square: "□", square: "□", SquareIntersection: "⊓", SquareSubset: "⊏", SquareSubsetEqual: "⊑", SquareSuperset: "⊐", SquareSupersetEqual: "⊒", SquareUnion: "⊔", squarf: "▪", squf: "▪", srarr: "→", Sscr: "𝒮", sscr: "𝓈", ssetmn: "∖", ssmile: "⌣", sstarf: "⋆", Star: "⋆", star: "☆", starf: "★", straightepsilon: "ϵ", straightphi: "ϕ", strns: "¯", Sub: "⋐", sub: "⊂", subdot: "⪽", subE: "⫅", sube: "⊆", subedot: "⫃", submult: "⫁", subnE: "⫋", subne: "⊊", subplus: "⪿", subrarr: "⥹", Subset: "⋐", subset: "⊂", subseteq: "⊆", subseteqq: "⫅", SubsetEqual: "⊆", subsetneq: "⊊", subsetneqq: "⫋", subsim: "⫇", subsub: "⫕", subsup: "⫓", succ: "≻", succapprox: "⪸", succcurlyeq: "≽", Succeeds: "≻", SucceedsEqual: "⪰", SucceedsSlantEqual: "≽", SucceedsTilde: "≿", succeq: "⪰", succnapprox: "⪺", succneqq: "⪶", succnsim: "⋩", succsim: "≿", SuchThat: "∋", Sum: "∑", sum: "∑", sung: "♪", Sup: "⋑", sup: "⊃", sup1: "¹", sup2: "²", sup3: "³", supdot: "⪾", supdsub: "⫘", supE: "⫆", supe: "⊇", supedot: "⫄", Superset: "⊃", SupersetEqual: "⊇", suphsol: "⟉", suphsub: "⫗", suplarr: "⥻", supmult: "⫂", supnE: "⫌", supne: "⊋", supplus: "⫀", Supset: "⋑", supset: "⊃", supseteq: "⊇", supseteqq: "⫆", supsetneq: "⊋", supsetneqq: "⫌", supsim: "⫈", supsub: "⫔", supsup: "⫖", swarhk: "⤦", swArr: "⇙", swarr: "↙", swarrow: "↙", swnwar: "⤪", szlig: "ß", Tab: "	", target: "⌖", Tau: "Τ", tau: "τ", tbrk: "⎴", Tcaron: "Ť", tcaron: "ť", Tcedil: "Ţ", tcedil: "ţ", Tcy: "Т", tcy: "т", tdot: "⃛", telrec: "⌕", Tfr: "𝔗", tfr: "𝔱", there4: "∴", Therefore: "∴", therefore: "∴", Theta: "Θ", theta: "θ", thetasym: "ϑ", thetav: "ϑ", thickapprox: "≈", thicksim: "∼", ThickSpace: "  ", thinsp: " ", ThinSpace: " ", thkap: "≈", thksim: "∼", THORN: "Þ", thorn: "þ", Tilde: "∼", tilde: "˜", TildeEqual: "≃", TildeFullEqual: "≅", TildeTilde: "≈", times: "×", timesb: "⊠", timesbar: "⨱", timesd: "⨰", tint: "∭", toea: "⤨", top: "⊤", topbot: "⌶", topcir: "⫱", Topf: "𝕋", topf: "𝕥", topfork: "⫚", tosa: "⤩", tprime: "‴", TRADE: "™", trade: "™", triangle: "▵", triangledown: "▿", triangleleft: "◃", trianglelefteq: "⊴", triangleq: "≜", triangleright: "▹", trianglerighteq: "⊵", tridot: "◬", trie: "≜", triminus: "⨺", TripleDot: "⃛", triplus: "⨹", trisb: "⧍", tritime: "⨻", trpezium: "⏢", Tscr: "𝒯", tscr: "𝓉", TScy: "Ц", tscy: "ц", TSHcy: "Ћ", tshcy: "ћ", Tstrok: "Ŧ", tstrok: "ŧ", twixt: "≬", twoheadleftarrow: "↞", twoheadrightarrow: "↠", Uacute: "Ú", uacute: "ú", Uarr: "↟", uArr: "⇑", uarr: "↑", Uarrocir: "⥉", Ubrcy: "Ў", ubrcy: "ў", Ubreve: "Ŭ", ubreve: "ŭ", Ucirc: "Û", ucirc: "û", Ucy: "У", ucy: "у", udarr: "⇅", Udblac: "Ű", udblac: "ű", udhar: "⥮", ufisht: "⥾", Ufr: "𝔘", ufr: "𝔲", Ugrave: "Ù", ugrave: "ù", uHar: "⥣", uharl: "↿", uharr: "↾", uhblk: "▀", ulcorn: "⌜", ulcorner: "⌜", ulcrop: "⌏", ultri: "◸", Umacr: "Ū", umacr: "ū", uml: "¨", UnderBar: "_", UnderBrace: "⏟", UnderBracket: "⎵", UnderParenthesis: "⏝", Union: "⋃", UnionPlus: "⊎", Uogon: "Ų", uogon: "ų", Uopf: "𝕌", uopf: "𝕦", UpArrow: "↑", Uparrow: "⇑", uparrow: "↑", UpArrowBar: "⤒", UpArrowDownArrow: "⇅", UpDownArrow: "↕", Updownarrow: "⇕", updownarrow: "↕", UpEquilibrium: "⥮", upharpoonleft: "↿", upharpoonright: "↾", uplus: "⊎", UpperLeftArrow: "↖", UpperRightArrow: "↗", Upsi: "ϒ", upsi: "υ", upsih: "ϒ", Upsilon: "Υ", upsilon: "υ", UpTee: "⊥", UpTeeArrow: "↥", upuparrows: "⇈", urcorn: "⌝", urcorner: "⌝", urcrop: "⌎", Uring: "Ů", uring: "ů", urtri: "◹", Uscr: "𝒰", uscr: "𝓊", utdot: "⋰", Utilde: "Ũ", utilde: "ũ", utri: "▵", utrif: "▴", uuarr: "⇈", Uuml: "Ü", uuml: "ü", uwangle: "⦧", vangrt: "⦜", varepsilon: "ϵ", varkappa: "ϰ", varnothing: "∅", varphi: "ϕ", varpi: "ϖ", varpropto: "∝", vArr: "⇕", varr: "↕", varrho: "ϱ", varsigma: "ς", varsubsetneq: "⊊︀", varsubsetneqq: "⫋︀", varsupsetneq: "⊋︀", varsupsetneqq: "⫌︀", vartheta: "ϑ", vartriangleleft: "⊲", vartriangleright: "⊳", Vbar: "⫫", vBar: "⫨", vBarv: "⫩", Vcy: "В", vcy: "в", VDash: "⊫", Vdash: "⊩", vDash: "⊨", vdash: "⊢", Vdashl: "⫦", Vee: "⋁", vee: "∨", veebar: "⊻", veeeq: "≚", vellip: "⋮", Verbar: "‖", verbar: "|", Vert: "‖", vert: "|", VerticalBar: "∣", VerticalLine: "|", VerticalSeparator: "❘", VerticalTilde: "≀", VeryThinSpace: " ", Vfr: "𝔙", vfr: "𝔳", vltri: "⊲", vnsub: "⊂⃒", vnsup: "⊃⃒", Vopf: "𝕍", vopf: "𝕧", vprop: "∝", vrtri: "⊳", Vscr: "𝒱", vscr: "𝓋", vsubnE: "⫋︀", vsubne: "⊊︀", vsupnE: "⫌︀", vsupne: "⊋︀", Vvdash: "⊪", vzigzag: "⦚", Wcirc: "Ŵ", wcirc: "ŵ", wedbar: "⩟", Wedge: "⋀", wedge: "∧", wedgeq: "≙", weierp: "℘", Wfr: "𝔚", wfr: "𝔴", Wopf: "𝕎", wopf: "𝕨", wp: "℘", wr: "≀", wreath: "≀", Wscr: "𝒲", wscr: "𝓌", xcap: "⋂", xcirc: "◯", xcup: "⋃", xdtri: "▽", Xfr: "𝔛", xfr: "𝔵", xhArr: "⟺", xharr: "⟷", Xi: "Ξ", xi: "ξ", xlArr: "⟸", xlarr: "⟵", xmap: "⟼", xnis: "⋻", xodot: "⨀", Xopf: "𝕏", xopf: "𝕩", xoplus: "⨁", xotime: "⨂", xrArr: "⟹", xrarr: "⟶", Xscr: "𝒳", xscr: "𝓍", xsqcup: "⨆", xuplus: "⨄", xutri: "△", xvee: "⋁", xwedge: "⋀", Yacute: "Ý", yacute: "ý", YAcy: "Я", yacy: "я", Ycirc: "Ŷ", ycirc: "ŷ", Ycy: "Ы", ycy: "ы", yen: "¥", Yfr: "𝔜", yfr: "𝔶", YIcy: "Ї", yicy: "ї", Yopf: "𝕐", yopf: "𝕪", Yscr: "𝒴", yscr: "𝓎", YUcy: "Ю", yucy: "ю", Yuml: "Ÿ", yuml: "ÿ", Zacute: "Ź", zacute: "ź", Zcaron: "Ž", zcaron: "ž", Zcy: "З", zcy: "з", Zdot: "Ż", zdot: "ż", zeetrf: "ℨ", ZeroWidthSpace: "​", Zeta: "Ζ", zeta: "ζ", Zfr: "ℨ", zfr: "𝔷", ZHcy: "Ж", zhcy: "ж", zigrarr: "⇝", Zopf: "ℤ", zopf: "𝕫", Zscr: "𝒵", zscr: "𝓏", zwj: "‍", zwnj: "‌" };
    }, {}], 2: [function (e, t) {
      "use strict";
      var r = {};["article", "aside", "button", "blockquote", "body", "canvas", "caption", "col", "colgroup", "dd", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "iframe", "li", "map", "object", "ol", "output", "p", "pre", "progress", "script", "section", "style", "table", "tbody", "td", "textarea", "tfoot", "th", "tr", "thead", "ul", "video"].forEach(function (e) {
        r[e] = !0;
      }), t.exports = r;
    }, {}], 3: [function (e, t) {
      "use strict";
      function r(e, t) {
        return e = e.source, t = t || "", function r(n, s) {
          return n ? (s = s.source || s, e = e.replace(n, s), r) : new RegExp(e, t);
        };
      }var n = /[a-zA-Z_:][a-zA-Z0-9:._-]*/,
          s = /[^"'=<>`\x00-\x20]+/,
          o = /'[^']*'/,
          i = /"[^"]*"/,
          l = r(/(?:unquoted|single_quoted|double_quoted)/)("unquoted", s)("single_quoted", o)("double_quoted", i)(),
          a = r(/(?:\s+attr_name(?:\s*=\s*attr_value)?)/)("attr_name", n)("attr_value", l)(),
          c = r(/<[A-Za-z][A-Za-z0-9]*attribute*\s*\/?>/)("attribute", a)(),
          u = /<\/[A-Za-z][A-Za-z0-9]*\s*>/,
          p = /<!--([^-]+|[-][^-]+)*-->/,
          h = /<[?].*?[?]>/,
          f = /<![A-Z]+\s+[^>]*>/,
          d = /<!\[CDATA\[([^\]]+|\][^\]]|\]\][^>])*\]\]>/,
          g = r(/^(?:open_tag|close_tag|comment|processing|declaration|cdata)/)("open_tag", c)("close_tag", u)("comment", p)("processing", h)("declaration", f)("cdata", d)();t.exports.HTML_TAG_RE = g;
    }, {}], 4: [function (e, t) {
      "use strict";
      t.exports = ["coap", "doi", "javascript", "aaa", "aaas", "about", "acap", "cap", "cid", "crid", "data", "dav", "dict", "dns", "file", "ftp", "geo", "go", "gopher", "h323", "http", "https", "iax", "icap", "im", "imap", "info", "ipp", "iris", "iris.beep", "iris.xpc", "iris.xpcs", "iris.lwz", "ldap", "mailto", "mid", "msrp", "msrps", "mtqp", "mupdate", "news", "nfs", "ni", "nih", "nntp", "opaquelocktoken", "pop", "pres", "rtsp", "service", "session", "shttp", "sieve", "sip", "sips", "sms", "snmp", "soap.beep", "soap.beeps", "tag", "tel", "telnet", "tftp", "thismessage", "tn3270", "tip", "tv", "urn", "vemmi", "ws", "wss", "xcon", "xcon-userid", "xmlrpc.beep", "xmlrpc.beeps", "xmpp", "z39.50r", "z39.50s", "adiumxtra", "afp", "afs", "aim", "apt", "attachment", "aw", "beshare", "bitcoin", "bolo", "callto", "chrome", "chrome-extension", "com-eventbrite-attendee", "content", "cvs", "dlna-playsingle", "dlna-playcontainer", "dtn", "dvb", "ed2k", "facetime", "feed", "finger", "fish", "gg", "git", "gizmoproject", "gtalk", "hcp", "icon", "ipn", "irc", "irc6", "ircs", "itms", "jar", "jms", "keyparc", "lastfm", "ldaps", "magnet", "maps", "market", "message", "mms", "ms-help", "msnim", "mumble", "mvn", "notes", "oid", "palm", "paparazzi", "platform", "proxy", "psyc", "query", "res", "resource", "rmi", "rsync", "rtmp", "secondlife", "sftp", "sgn", "skype", "smb", "soldat", "spotify", "ssh", "steam", "svn", "teamspeak", "things", "udp", "unreal", "ut2004", "ventrilo", "view-source", "webcal", "wtai", "wyciwyg", "xfire", "xri", "ymsgr"];
    }, {}], 5: [function (e, t, r) {
      "use strict";
      function n(e) {
        return Object.prototype.toString.call(e);
      }function s(e) {
        return "[object String]" === n(e);
      }function o(e, t) {
        return e ? d.call(e, t) : !1;
      }function i(e) {
        var t = [].slice.call(arguments, 1);return t.forEach(function (t) {
          if (t) {
            if ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) throw new TypeError(t + "must be object");Object.keys(t).forEach(function (r) {
              e[r] = t[r];
            });
          }
        }), e;
      }function l(e) {
        return e.indexOf("\\") < 0 ? e : e.replace(g, "$1");
      }function a(e) {
        return e >= 55296 && 57343 >= e ? !1 : e >= 64976 && 65007 >= e ? !1 : 65535 === (65535 & e) || 65534 === (65535 & e) ? !1 : e >= 0 && 8 >= e ? !1 : 11 === e ? !1 : e >= 14 && 31 >= e ? !1 : e >= 127 && 159 >= e ? !1 : e > 1114111 ? !1 : !0;
      }function c(e) {
        if (e > 65535) {
          e -= 65536;var t = 55296 + (e >> 10),
              r = 56320 + (1023 & e);return String.fromCharCode(t, r);
        }return String.fromCharCode(e);
      }function u(e, t) {
        var r = 0;return o(v, t) ? v[t] : 35 === t.charCodeAt(0) && b.test(t) && (r = "x" === t[1].toLowerCase() ? parseInt(t.slice(2), 16) : parseInt(t.slice(1), 10), a(r)) ? c(r) : e;
      }function p(e) {
        return e.indexOf("&") < 0 ? e : e.replace(m, u);
      }function h(e) {
        return y[e];
      }function f(e) {
        return k.test(e) ? e.replace(_, h) : e;
      }var d = Object.prototype.hasOwnProperty,
          g = /\\([\\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g,
          m = /&([a-z#][a-z0-9]{1,31});/gi,
          b = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,
          v = e("./entities"),
          k = /[&<>"]/,
          _ = /[&<>"]/g,
          y = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;" };r.assign = i, r.isString = s, r.has = o, r.unescapeMd = l, r.isValidEntityCode = a, r.fromCodePoint = c, r.replaceEntities = p, r.escapeHtml = f;
    }, { "./entities": 1 }], 6: [function (e, t) {
      "use strict";
      t.exports = { options: { html: !0, xhtmlOut: !0, breaks: !1, langPrefix: "language-", linkify: !1, linkTarget: "", typographer: !1, quotes: "“”‘’", highlight: null, maxNesting: 20 }, components: { core: { rules: ["block", "inline", "references", "abbr2"] }, block: { rules: ["blockquote", "code", "fences", "heading", "hr", "htmlblock", "lheading", "list", "paragraph"] }, inline: { rules: ["autolink", "backticks", "emphasis", "entity", "escape", "htmltag", "links", "newline", "text"] } } };
    }, {}], 7: [function (e, t) {
      "use strict";
      t.exports = { options: { html: !1, xhtmlOut: !1, breaks: !1, langPrefix: "language-", linkify: !1, linkTarget: "", typographer: !1, quotes: "“”‘’", highlight: null, maxNesting: 20 }, components: { core: { rules: ["block", "inline", "references", "replacements", "linkify", "smartquotes", "references", "abbr2", "footnote_tail"] }, block: { rules: ["blockquote", "code", "fences", "footnote", "heading", "hr", "htmlblock", "lheading", "list", "paragraph", "table"] }, inline: { rules: ["autolink", "backticks", "del", "emphasis", "entity", "escape", "footnote_ref", "htmltag", "links", "newline", "text"] } } };
    }, {}], 8: [function (e, t) {
      "use strict";
      t.exports = { options: { html: !1, xhtmlOut: !1, breaks: !1, langPrefix: "language-", linkify: !1, linkTarget: "", typographer: !1, quotes: "“”‘’", highlight: null, maxNesting: 20 }, components: { core: {}, block: {}, inline: {} } };
    }, {}], 9: [function (e, t) {
      "use strict";
      var r = e("../common/utils").replaceEntities;t.exports = function (e) {
        var t = r(e);try {
          t = decodeURI(t);
        } catch (n) {}return encodeURI(t);
      };
    }, { "../common/utils": 5 }], 10: [function (e, t) {
      "use strict";
      t.exports = function (e) {
        return e.trim().replace(/\s+/g, " ").toUpperCase();
      };
    }, {}], 11: [function (e, t) {
      "use strict";
      var r = e("./normalize_link"),
          n = e("../common/utils").unescapeMd;t.exports = function (e, t) {
        var s,
            o,
            i,
            l = t,
            a = e.posMax;if (60 === e.src.charCodeAt(t)) {
          for (t++; a > t;) {
            if (s = e.src.charCodeAt(t), 10 === s) return !1;if (62 === s) return i = r(n(e.src.slice(l + 1, t))), e.parser.validateLink(i) ? (e.pos = t + 1, e.linkContent = i, !0) : !1;92 === s && a > t + 1 ? t += 2 : t++;
          }return !1;
        }for (o = 0; a > t && (s = e.src.charCodeAt(t), 32 !== s) && !(s > 8 && 14 > s);) {
          if (92 === s && a > t + 1) t += 2;else {
            if (40 === s && (o++, o > 1)) break;if (41 === s && (o--, 0 > o)) break;t++;
          }
        }return l === t ? !1 : (i = n(e.src.slice(l, t)), e.parser.validateLink(i) ? (e.linkContent = i, e.pos = t, !0) : !1);
      };
    }, { "../common/utils": 5, "./normalize_link": 9 }], 12: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o = -1,
            i = e.posMax,
            l = e.pos,
            a = e.isInLabel;if (e.isInLabel) return -1;if (e.labelUnmatchedScopes) return e.labelUnmatchedScopes--, -1;for (e.pos = t + 1, e.isInLabel = !0, r = 1; e.pos < i;) {
          if (s = e.src.charCodeAt(e.pos), 91 === s) r++;else if (93 === s && (r--, 0 === r)) {
            n = !0;break;
          }e.parser.skipToken(e);
        }return n ? (o = e.pos, e.labelUnmatchedScopes = 0) : e.labelUnmatchedScopes = r - 1, e.pos = l, e.isInLabel = a, o;
      };
    }, {}], 13: [function (e, t) {
      "use strict";
      var r = e("../common/utils").unescapeMd;t.exports = function (e, t) {
        var n,
            s = t,
            o = e.posMax,
            i = e.src.charCodeAt(t);if (34 !== i && 39 !== i && 40 !== i) return !1;for (t++, 40 === i && (i = 41); o > t;) {
          if (n = e.src.charCodeAt(t), n === i) return e.pos = t + 1, e.linkContent = r(e.src.slice(s + 1, t)), !0;92 === n && o > t + 1 ? t += 2 : t++;
        }return !1;
      };
    }, { "../common/utils": 5 }], 14: [function (e, t) {
      "use strict";
      function r(e, t, r) {
        this.src = t, this.env = r, this.options = e.options, this.tokens = [], this.inlineMode = !1, this.inline = e.inline, this.block = e.block, this.renderer = e.renderer, this.typographer = e.typographer;
      }function n(e, t) {
        "string" != typeof e && (t = e, e = "default"), this.inline = new a(), this.block = new l(), this.core = new i(), this.renderer = new o(), this.ruler = new c(), this.options = {}, this.configure(u[e]), this.set(t || {});
      }var s = e("./common/utils").assign,
          o = e("./renderer"),
          i = e("./parser_core"),
          l = e("./parser_block"),
          a = e("./parser_inline"),
          c = e("./ruler"),
          u = { "default": e("./configs/default"), full: e("./configs/full"), commonmark: e("./configs/commonmark") };n.prototype.set = function (e) {
        s(this.options, e);
      }, n.prototype.configure = function (e) {
        var t = this;if (!e) throw new Error("Wrong `remarkable` preset, check name/content");e.options && t.set(e.options), e.components && Object.keys(e.components).forEach(function (r) {
          e.components[r].rules && t[r].ruler.enable(e.components[r].rules, !0);
        });
      }, n.prototype.use = function (e, t) {
        return e(this, t), this;
      }, n.prototype.parse = function (e, t) {
        var n = new r(this, e, t);return this.core.process(n), n.tokens;
      }, n.prototype.render = function (e, t) {
        return t = t || {}, this.renderer.render(this.parse(e, t), this.options, t);
      }, n.prototype.parseInline = function (e, t) {
        var n = new r(this, e, t);return n.inlineMode = !0, this.core.process(n), n.tokens;
      }, n.prototype.renderInline = function (e, t) {
        return t = t || {}, this.renderer.render(this.parseInline(e, t), this.options, t);
      }, t.exports = n, t.exports.utils = e("./common/utils");
    }, { "./common/utils": 5, "./configs/commonmark": 6, "./configs/default": 7, "./configs/full": 8, "./parser_block": 15, "./parser_core": 16, "./parser_inline": 17, "./renderer": 18, "./ruler": 19 }], 15: [function (e, t) {
      "use strict";
      function r() {
        this.ruler = new n();for (var e = 0; e < o.length; e++) {
          this.ruler.push(o[e][0], o[e][1], { alt: (o[e][2] || []).slice() });
        }
      }var n = e("./ruler"),
          s = e("./rules_block/state_block"),
          o = [["code", e("./rules_block/code")], ["fences", e("./rules_block/fences"), ["paragraph", "blockquote", "list"]], ["blockquote", e("./rules_block/blockquote"), ["paragraph", "blockquote", "list"]], ["hr", e("./rules_block/hr"), ["paragraph", "blockquote", "list"]], ["list", e("./rules_block/list"), ["paragraph", "blockquote"]], ["footnote", e("./rules_block/footnote"), ["paragraph"]], ["heading", e("./rules_block/heading"), ["paragraph", "blockquote"]], ["lheading", e("./rules_block/lheading")], ["htmlblock", e("./rules_block/htmlblock"), ["paragraph", "blockquote"]], ["table", e("./rules_block/table"), ["paragraph"]], ["deflist", e("./rules_block/deflist"), ["paragraph"]], ["paragraph", e("./rules_block/paragraph")]];r.prototype.tokenize = function (e, t, r) {
        for (var n, s, o = this.ruler.getRules(""), i = o.length, l = t, a = !1; r > l && (e.line = l = e.skipEmptyLines(l), !(l >= r)) && !(e.tShift[l] < e.blkIndent);) {
          for (s = 0; i > s && !(n = o[s](e, l, r, !1)); s++) {}if (e.tight = !a, e.isEmpty(e.line - 1) && (a = !0), l = e.line, r > l && e.isEmpty(l)) {
            if (a = !0, l++, r > l && "list" === e.parentType && e.isEmpty(l)) break;e.line = l;
          }
        }
      };var i = /[\n\t]/g,
          l = /\r[\n\u0085]|[\u2424\u2028\u0085]/g,
          a = /\u00a0/g;r.prototype.parse = function (e, t, r, n) {
        var o,
            c = 0,
            u = 0;return e ? (e = e.replace(a, " "), e = e.replace(l, "\n"), e.indexOf("	") >= 0 && (e = e.replace(i, function (t, r) {
          var n;return 10 === e.charCodeAt(r) ? (c = r + 1, u = 0, t) : (n = "    ".slice((r - c - u) % 4), u = r - c + 1, n);
        })), o = new s(e, this, t, r, n), void this.tokenize(o, o.line, o.lineMax)) : [];
      }, t.exports = r;
    }, { "./ruler": 19, "./rules_block/blockquote": 21, "./rules_block/code": 22, "./rules_block/deflist": 23, "./rules_block/fences": 24, "./rules_block/footnote": 25, "./rules_block/heading": 26, "./rules_block/hr": 27, "./rules_block/htmlblock": 28, "./rules_block/lheading": 29, "./rules_block/list": 30, "./rules_block/paragraph": 31, "./rules_block/state_block": 32, "./rules_block/table": 33 }], 16: [function (e, t) {
      "use strict";
      function r() {
        this.options = {}, this.ruler = new n();for (var e = 0; e < s.length; e++) {
          this.ruler.push(s[e][0], s[e][1]);
        }
      }var n = e("./ruler"),
          s = [["block", e("./rules_core/block")], ["abbr", e("./rules_core/abbr")], ["references", e("./rules_core/references")], ["inline", e("./rules_core/inline")], ["footnote_tail", e("./rules_core/footnote_tail")], ["abbr2", e("./rules_core/abbr2")], ["replacements", e("./rules_core/replacements")], ["smartquotes", e("./rules_core/smartquotes")], ["linkify", e("./rules_core/linkify")]];r.prototype.process = function (e) {
        var t, r, n;for (n = this.ruler.getRules(""), t = 0, r = n.length; r > t; t++) {
          n[t](e);
        }
      }, t.exports = r;
    }, { "./ruler": 19, "./rules_core/abbr": 34, "./rules_core/abbr2": 35, "./rules_core/block": 36, "./rules_core/footnote_tail": 37, "./rules_core/inline": 38, "./rules_core/linkify": 39, "./rules_core/references": 40, "./rules_core/replacements": 41, "./rules_core/smartquotes": 42 }], 17: [function (e, t) {
      "use strict";
      function r() {
        this.ruler = new s();for (var e = 0; e < l.length; e++) {
          this.ruler.push(l[e][0], l[e][1]);
        }this.validateLink = n;
      }function n(e) {
        var t = ["vbscript", "javascript", "file", "data"],
            r = e.trim().toLowerCase();return r = i.replaceEntities(r), -1 !== r.indexOf(":") && -1 !== t.indexOf(r.split(":")[0]) ? !1 : !0;
      }var s = e("./ruler"),
          o = e("./rules_inline/state_inline"),
          i = e("./common/utils"),
          l = [["text", e("./rules_inline/text")], ["newline", e("./rules_inline/newline")], ["escape", e("./rules_inline/escape")], ["backticks", e("./rules_inline/backticks")], ["del", e("./rules_inline/del")], ["ins", e("./rules_inline/ins")], ["mark", e("./rules_inline/mark")], ["emphasis", e("./rules_inline/emphasis")], ["sub", e("./rules_inline/sub")], ["sup", e("./rules_inline/sup")], ["links", e("./rules_inline/links")], ["footnote_inline", e("./rules_inline/footnote_inline")], ["footnote_ref", e("./rules_inline/footnote_ref")], ["autolink", e("./rules_inline/autolink")], ["htmltag", e("./rules_inline/htmltag")], ["entity", e("./rules_inline/entity")]];r.prototype.skipToken = function (e) {
        var t,
            r,
            n = this.ruler.getRules(""),
            s = n.length,
            o = e.pos;if ((r = e.cacheGet(o)) > 0) return void (e.pos = r);for (t = 0; s > t; t++) {
          if (n[t](e, !0)) return void e.cacheSet(o, e.pos);
        }e.pos++, e.cacheSet(o, e.pos);
      }, r.prototype.tokenize = function (e) {
        for (var t, r, n = this.ruler.getRules(""), s = n.length, o = e.posMax; e.pos < o;) {
          for (r = 0; s > r && !(t = n[r](e, !1)); r++) {}if (t) {
            if (e.pos >= o) break;
          } else e.pending += e.src[e.pos++];
        }e.pending && e.pushPending();
      }, r.prototype.parse = function (e, t, r, n) {
        var s = new o(e, this, t, r, n);this.tokenize(s);
      }, t.exports = r;
    }, { "./common/utils": 5, "./ruler": 19, "./rules_inline/autolink": 43, "./rules_inline/backticks": 44, "./rules_inline/del": 45, "./rules_inline/emphasis": 46, "./rules_inline/entity": 47, "./rules_inline/escape": 48, "./rules_inline/footnote_inline": 49, "./rules_inline/footnote_ref": 50, "./rules_inline/htmltag": 51, "./rules_inline/ins": 52, "./rules_inline/links": 53, "./rules_inline/mark": 54, "./rules_inline/newline": 55, "./rules_inline/state_inline": 56, "./rules_inline/sub": 57, "./rules_inline/sup": 58, "./rules_inline/text": 59 }], 18: [function (e, t) {
      "use strict";
      function r() {
        this.rules = n.assign({}, s), this.getBreak = s.getBreak;
      }var n = e("./common/utils"),
          s = e("./rules");t.exports = r, r.prototype.renderInline = function (e, t, r) {
        for (var n = this.rules, s = e.length, o = 0, i = ""; s--;) {
          i += n[e[o].type](e, o++, t, r, this);
        }return i;
      }, r.prototype.render = function (e, t, r) {
        for (var n = this.rules, s = e.length, o = -1, i = ""; ++o < s;) {
          i += "inline" === e[o].type ? this.renderInline(e[o].children, t, r) : n[e[o].type](e, o, t, r, this);
        }return i;
      };
    }, { "./common/utils": 5, "./rules": 20 }], 19: [function (e, t) {
      "use strict";
      function r() {
        this.__rules__ = [], this.__cache__ = null;
      }r.prototype.__find__ = function (e) {
        for (var t = this.__rules__.length, r = -1; t--;) {
          if (this.__rules__[++r].name === e) return r;
        }return -1;
      }, r.prototype.__compile__ = function () {
        var e = this,
            t = [""];e.__rules__.forEach(function (e) {
          e.enabled && e.alt.forEach(function (e) {
            t.indexOf(e) < 0 && t.push(e);
          });
        }), e.__cache__ = {}, t.forEach(function (t) {
          e.__cache__[t] = [], e.__rules__.forEach(function (r) {
            r.enabled && (t && r.alt.indexOf(t) < 0 || e.__cache__[t].push(r.fn));
          });
        });
      }, r.prototype.at = function (e, t, r) {
        var n = this.__find__(e),
            s = r || {};if (-1 === n) throw new Error("Parser rule not found: " + e);this.__rules__[n].fn = t, this.__rules__[n].alt = s.alt || [], this.__cache__ = null;
      }, r.prototype.before = function (e, t, r, n) {
        var s = this.__find__(e),
            o = n || {};if (-1 === s) throw new Error("Parser rule not found: " + e);this.__rules__.splice(s, 0, { name: t, enabled: !0, fn: r, alt: o.alt || [] }), this.__cache__ = null;
      }, r.prototype.after = function (e, t, r, n) {
        var s = this.__find__(e),
            o = n || {};if (-1 === s) throw new Error("Parser rule not found: " + e);this.__rules__.splice(s + 1, 0, { name: t, enabled: !0, fn: r, alt: o.alt || [] }), this.__cache__ = null;
      }, r.prototype.push = function (e, t, r) {
        var n = r || {};this.__rules__.push({ name: e, enabled: !0, fn: t, alt: n.alt || [] }), this.__cache__ = null;
      }, r.prototype.enable = function (e, t) {
        e = Array.isArray(e) ? e : [e], t && this.__rules__.forEach(function (e) {
          e.enabled = !1;
        }), e.forEach(function (e) {
          var t = this.__find__(e);if (0 > t) throw new Error("Rules manager: invalid rule name " + e);this.__rules__[t].enabled = !0;
        }, this), this.__cache__ = null;
      }, r.prototype.disable = function (e) {
        e = Array.isArray(e) ? e : [e], e.forEach(function (e) {
          var t = this.__find__(e);if (0 > t) throw new Error("Rules manager: invalid rule name " + e);this.__rules__[t].enabled = !1;
        }, this), this.__cache__ = null;
      }, r.prototype.getRules = function (e) {
        return null === this.__cache__ && this.__compile__(), this.__cache__[e] || [];
      }, t.exports = r;
    }, {}], 20: [function (e, t) {
      "use strict";
      function r(e, t) {
        return ++t >= e.length - 2 ? t : "paragraph_open" === e[t].type && e[t].tight && "inline" === e[t + 1].type && 0 === e[t + 1].content.length && "paragraph_close" === e[t + 2].type && e[t + 2].tight ? r(e, t + 2) : t;
      }var n = e("./common/utils").has,
          s = e("./common/utils").unescapeMd,
          o = e("./common/utils").replaceEntities,
          i = e("./common/utils").escapeHtml,
          l = {};l.blockquote_open = function () {
        return "<blockquote>\n";
      }, l.blockquote_close = function (e, t) {
        return "</blockquote>" + a(e, t);
      }, l.code = function (e, t) {
        return e[t].block ? "<pre><code>" + i(e[t].content) + "</code></pre>" + a(e, t) : "<code>" + i(e[t].content) + "</code>";
      }, l.fence = function (e, t, r, l, c) {
        var u,
            p,
            h,
            f = e[t],
            d = "",
            g = r.langPrefix,
            m = "";if (f.params) {
          if (u = f.params.split(/\s+/g), p = u.join(" "), n(c.rules.fence_custom, u[0])) return c.rules.fence_custom[u[0]](e, t, r, l, c);m = i(o(s(p))), d = ' class="' + g + m + '"';
        }return h = r.highlight ? r.highlight.apply(r.highlight, [f.content].concat(u)) || i(f.content) : i(f.content), "<pre><code" + d + ">" + h + "</code></pre>" + a(e, t);
      }, l.fence_custom = {}, l.heading_open = function (e, t) {
        return "<h" + e[t].hLevel + ">";
      }, l.heading_close = function (e, t) {
        return "</h" + e[t].hLevel + ">\n";
      }, l.hr = function (e, t, r) {
        return (r.xhtmlOut ? "<hr />" : "<hr>") + a(e, t);
      }, l.bullet_list_open = function () {
        return "<ul>\n";
      }, l.bullet_list_close = function (e, t) {
        return "</ul>" + a(e, t);
      }, l.list_item_open = function () {
        return "<li>";
      }, l.list_item_close = function () {
        return "</li>\n";
      }, l.ordered_list_open = function (e, t) {
        var r = e[t],
            n = r.order > 1 ? ' start="' + r.order + '"' : "";return "<ol" + n + ">\n";
      }, l.ordered_list_close = function (e, t) {
        return "</ol>" + a(e, t);
      }, l.paragraph_open = function (e, t) {
        return e[t].tight ? "" : "<p>";
      }, l.paragraph_close = function (e, t) {
        var r = !(e[t].tight && t && "inline" === e[t - 1].type && !e[t - 1].content);return (e[t].tight ? "" : "</p>") + (r ? a(e, t) : "");
      }, l.link_open = function (e, t, r) {
        var n = e[t].title ? ' title="' + i(o(e[t].title)) + '"' : "",
            s = r.linkTarget ? ' target="' + r.linkTarget + '"' : "";return '<a href="' + i(e[t].href) + '"' + n + s + ">";
      }, l.link_close = function () {
        return "</a>";
      }, l.image = function (e, t, r) {
        var n = ' src="' + i(e[t].src) + '"',
            l = e[t].title ? ' title="' + i(o(e[t].title)) + '"' : "",
            a = ' alt="' + (e[t].alt ? i(o(s(e[t].alt))) : "") + '"',
            c = r.xhtmlOut ? " /" : "";return "<img" + n + a + l + c + ">";
      }, l.table_open = function () {
        return "<table>\n";
      }, l.table_close = function () {
        return "</table>\n";
      }, l.thead_open = function () {
        return "<thead>\n";
      }, l.thead_close = function () {
        return "</thead>\n";
      }, l.tbody_open = function () {
        return "<tbody>\n";
      }, l.tbody_close = function () {
        return "</tbody>\n";
      }, l.tr_open = function () {
        return "<tr>";
      }, l.tr_close = function () {
        return "</tr>\n";
      }, l.th_open = function (e, t) {
        var r = e[t];return "<th" + (r.align ? ' style="text-align:' + r.align + '"' : "") + ">";
      }, l.th_close = function () {
        return "</th>";
      }, l.td_open = function (e, t) {
        var r = e[t];return "<td" + (r.align ? ' style="text-align:' + r.align + '"' : "") + ">";
      }, l.td_close = function () {
        return "</td>";
      }, l.strong_open = function () {
        return "<strong>";
      }, l.strong_close = function () {
        return "</strong>";
      }, l.em_open = function () {
        return "<em>";
      }, l.em_close = function () {
        return "</em>";
      }, l.del_open = function () {
        return "<del>";
      }, l.del_close = function () {
        return "</del>";
      }, l.ins_open = function () {
        return "<ins>";
      }, l.ins_close = function () {
        return "</ins>";
      }, l.mark_open = function () {
        return "<mark>";
      }, l.mark_close = function () {
        return "</mark>";
      }, l.sub = function (e, t) {
        return "<sub>" + i(e[t].content) + "</sub>";
      }, l.sup = function (e, t) {
        return "<sup>" + i(e[t].content) + "</sup>";
      }, l.hardbreak = function (e, t, r) {
        return r.xhtmlOut ? "<br />\n" : "<br>\n";
      }, l.softbreak = function (e, t, r) {
        return r.breaks ? r.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
      }, l.text = function (e, t) {
        return i(e[t].content);
      }, l.htmlblock = function (e, t) {
        return e[t].content;
      }, l.htmltag = function (e, t) {
        return e[t].content;
      }, l.abbr_open = function (e, t) {
        return '<abbr title="' + i(o(e[t].title)) + '">';
      }, l.abbr_close = function () {
        return "</abbr>";
      }, l.footnote_ref = function (e, t) {
        var r = Number(e[t].id + 1).toString(),
            n = "fnref" + r;return e[t].subId > 0 && (n += ":" + e[t].subId), '<sup class="footnote-ref"><a href="#fn' + r + '" id="' + n + '">[' + r + "]</a></sup>";
      }, l.footnote_block_open = function (e, t, r) {
        var n = r.xhtmlOut ? '<hr class="footnotes-sep" />\n' : '<hr class="footnotes-sep">\n';return n + '<section class="footnotes">\n<ol class="footnotes-list">\n';
      }, l.footnote_block_close = function () {
        return "</ol>\n</section>\n";
      }, l.footnote_open = function (e, t) {
        var r = Number(e[t].id + 1).toString();return '<li id="fn' + r + '"  class="footnote-item">';
      }, l.footnote_close = function () {
        return "</li>\n";
      }, l.footnote_anchor = function (e, t) {
        var r = Number(e[t].id + 1).toString(),
            n = "fnref" + r;return e[t].subId > 0 && (n += ":" + e[t].subId), ' <a href="#' + n + '" class="footnote-backref">↩</a>';
      }, l.dl_open = function () {
        return "<dl>\n";
      }, l.dt_open = function () {
        return "<dt>";
      }, l.dd_open = function () {
        return "<dd>";
      }, l.dl_close = function () {
        return "</dl>\n";
      }, l.dt_close = function () {
        return "</dt>\n";
      }, l.dd_close = function () {
        return "</dd>\n";
      };var a = l.getBreak = function (e, t) {
        return t = r(e, t), t < e.length && "list_item_close" === e[t].type ? "" : "\n";
      };t.exports = l;
    }, { "./common/utils": 5 }], 21: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r, n) {
        var s,
            o,
            i,
            l,
            a,
            c,
            u,
            p,
            h,
            f,
            d,
            g = e.bMarks[t] + e.tShift[t],
            m = e.eMarks[t];if (g > m) return !1;if (62 !== e.src.charCodeAt(g++)) return !1;if (e.level >= e.options.maxNesting) return !1;if (n) return !0;for (32 === e.src.charCodeAt(g) && g++, a = e.blkIndent, e.blkIndent = 0, l = [e.bMarks[t]], e.bMarks[t] = g, g = m > g ? e.skipSpaces(g) : g, o = g >= m, i = [e.tShift[t]], e.tShift[t] = g - e.bMarks[t], p = e.parser.ruler.getRules("blockquote"), s = t + 1; r > s && (g = e.bMarks[s] + e.tShift[s], m = e.eMarks[s], !(g >= m)); s++) {
          if (62 !== e.src.charCodeAt(g++)) {
            if (o) break;for (d = !1, h = 0, f = p.length; f > h; h++) {
              if (p[h](e, s, r, !0)) {
                d = !0;break;
              }
            }if (d) break;l.push(e.bMarks[s]), i.push(e.tShift[s]), e.tShift[s] = -1337;
          } else 32 === e.src.charCodeAt(g) && g++, l.push(e.bMarks[s]), e.bMarks[s] = g, g = m > g ? e.skipSpaces(g) : g, o = g >= m, i.push(e.tShift[s]), e.tShift[s] = g - e.bMarks[s];
        }for (c = e.parentType, e.parentType = "blockquote", e.tokens.push({ type: "blockquote_open", lines: u = [t, 0], level: e.level++ }), e.parser.tokenize(e, t, s), e.tokens.push({ type: "blockquote_close", level: --e.level }), e.parentType = c, u[1] = e.line, h = 0; h < i.length; h++) {
          e.bMarks[h + t] = l[h], e.tShift[h + t] = i[h];
        }return e.blkIndent = a, !0;
      };
    }, {}], 22: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r) {
        var n, s;if (e.tShift[t] - e.blkIndent < 4) return !1;for (s = n = t + 1; r > n;) {
          if (e.isEmpty(n)) n++;else {
            if (!(e.tShift[n] - e.blkIndent >= 4)) break;n++, s = n;
          }
        }return e.line = n, e.tokens.push({ type: "code", content: e.getLines(t, s, 4 + e.blkIndent, !0), block: !0, lines: [t, e.line], level: e.level }), !0;
      };
    }, {}], 23: [function (e, t) {
      "use strict";
      function r(e, t) {
        var r,
            n,
            s = e.bMarks[t] + e.tShift[t],
            o = e.eMarks[t];return s >= o ? -1 : (n = e.src.charCodeAt(s++), 126 !== n && 58 !== n ? -1 : (r = e.skipSpaces(s), s === r ? -1 : r >= o ? -1 : r));
      }function n(e, t) {
        var r,
            n,
            s = e.level + 2;for (r = t + 2, n = e.tokens.length - 2; n > r; r++) {
          e.tokens[r].level === s && "paragraph_open" === e.tokens[r].type && (e.tokens[r + 2].tight = !0, e.tokens[r].tight = !0, r += 2);
        }
      }t.exports = function (e, t, s, o) {
        var i, l, a, c, u, p, h, f, d, g, m, b, v, k;if (o) return e.ddIndent < 0 ? !1 : r(e, t) >= 0;if (h = t + 1, e.isEmpty(h) && ++h > s) return !1;if (e.tShift[h] < e.blkIndent) return !1;if (i = r(e, h), 0 > i) return !1;if (e.level >= e.options.maxNesting) return !1;p = e.tokens.length, e.tokens.push({ type: "dl_open", lines: u = [t, 0], level: e.level++ }), a = t, l = h;e: for (;;) {
          for (k = !0, v = !1, e.tokens.push({ type: "dt_open", lines: [a, a], level: e.level++ }), e.tokens.push({ type: "inline", content: e.getLines(a, a + 1, e.blkIndent, !1).trim(), level: e.level + 1, lines: [a, a], children: [] }), e.tokens.push({ type: "dt_close", level: --e.level });;) {
            if (e.tokens.push({ type: "dd_open", lines: c = [h, 0], level: e.level++ }), b = e.tight, d = e.ddIndent, f = e.blkIndent, m = e.tShift[l], g = e.parentType, e.blkIndent = e.ddIndent = e.tShift[l] + 2, e.tShift[l] = i - e.bMarks[l], e.tight = !0, e.parentType = "deflist", e.parser.tokenize(e, l, s, !0), (!e.tight || v) && (k = !1), v = e.line - l > 1 && e.isEmpty(e.line - 1), e.tShift[l] = m, e.tight = b, e.parentType = g, e.blkIndent = f, e.ddIndent = d, e.tokens.push({ type: "dd_close", level: --e.level }), c[1] = h = e.line, h >= s) break e;if (e.tShift[h] < e.blkIndent) break e;if (i = r(e, h), 0 > i) break;l = h;
          }if (h >= s) break;if (a = h, e.isEmpty(a)) break;if (e.tShift[a] < e.blkIndent) break;if (l = a + 1, l >= s) break;if (e.isEmpty(l) && l++, l >= s) break;if (e.tShift[l] < e.blkIndent) break;if (i = r(e, l), 0 > i) break;
        }return e.tokens.push({ type: "dl_close", level: --e.level }), u[1] = h, e.line = h, k && n(e, p), !0;
      };
    }, {}], 24: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r, n) {
        var s,
            o,
            i,
            l,
            a,
            c = !1,
            u = e.bMarks[t] + e.tShift[t],
            p = e.eMarks[t];if (u + 3 > p) return !1;if (s = e.src.charCodeAt(u), 126 !== s && 96 !== s) return !1;if (a = u, u = e.skipChars(u, s), o = u - a, 3 > o) return !1;if (i = e.src.slice(u, p).trim(), i.indexOf("`") >= 0) return !1;if (n) return !0;for (l = t; (l++, !(l >= r)) && (u = a = e.bMarks[l] + e.tShift[l], p = e.eMarks[l], !(p > u && e.tShift[l] < e.blkIndent));) {
          if (e.src.charCodeAt(u) === s && !(e.tShift[l] - e.blkIndent >= 4 || (u = e.skipChars(u, s), o > u - a || (u = e.skipSpaces(u), p > u)))) {
            c = !0;break;
          }
        }return o = e.tShift[t], e.line = l + (c ? 1 : 0), e.tokens.push({ type: "fence", params: i, content: e.getLines(t + 1, l, o, !0), lines: [t, e.line], level: e.level }), !0;
      };
    }, {}], 25: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r, n) {
        var s,
            o,
            i,
            l,
            a,
            c = e.bMarks[t] + e.tShift[t],
            u = e.eMarks[t];if (c + 4 > u) return !1;if (91 !== e.src.charCodeAt(c)) return !1;if (94 !== e.src.charCodeAt(c + 1)) return !1;if (e.level >= e.options.maxNesting) return !1;for (l = c + 2; u > l; l++) {
          if (32 === e.src.charCodeAt(l)) return !1;if (93 === e.src.charCodeAt(l)) break;
        }return l === c + 2 ? !1 : l + 1 >= u || 58 !== e.src.charCodeAt(++l) ? !1 : n ? !0 : (l++, e.env.footnotes || (e.env.footnotes = {}), e.env.footnotes.refs || (e.env.footnotes.refs = {}), a = e.src.slice(c + 2, l - 2), e.env.footnotes.refs[":" + a] = -1, e.tokens.push({ type: "footnote_reference_open", label: a, level: e.level++ }), s = e.bMarks[t], o = e.tShift[t], i = e.parentType, e.tShift[t] = e.skipSpaces(l) - l, e.bMarks[t] = l, e.blkIndent += 4, e.parentType = "footnote", e.tShift[t] < e.blkIndent && (e.tShift[t] += e.blkIndent, e.bMarks[t] -= e.blkIndent), e.parser.tokenize(e, t, r, !0), e.parentType = i, e.blkIndent -= 4, e.tShift[t] = o, e.bMarks[t] = s, e.tokens.push({ type: "footnote_reference_close", level: --e.level }), !0);
      };
    }, {}], 26: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r, n) {
        var s,
            o,
            i,
            l = e.bMarks[t] + e.tShift[t],
            a = e.eMarks[t];if (l >= a) return !1;if (s = e.src.charCodeAt(l), 35 !== s || l >= a) return !1;for (o = 1, s = e.src.charCodeAt(++l); 35 === s && a > l && 6 >= o;) {
          o++, s = e.src.charCodeAt(++l);
        }return o > 6 || a > l && 32 !== s ? !1 : n ? !0 : (a = e.skipCharsBack(a, 32, l), i = e.skipCharsBack(a, 35, l), i > l && 32 === e.src.charCodeAt(i - 1) && (a = i), e.line = t + 1, e.tokens.push({ type: "heading_open", hLevel: o, lines: [t, e.line], level: e.level }), a > l && e.tokens.push({ type: "inline", content: e.src.slice(l, a).trim(), level: e.level + 1, lines: [t, e.line], children: [] }), e.tokens.push({ type: "heading_close", hLevel: o, level: e.level }), !0);
      };
    }, {}], 27: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r, n) {
        var s,
            o,
            i,
            l = e.bMarks[t],
            a = e.eMarks[t];if (l += e.tShift[t], l > a) return !1;if (s = e.src.charCodeAt(l++), 42 !== s && 45 !== s && 95 !== s) return !1;for (o = 1; a > l;) {
          if (i = e.src.charCodeAt(l++), i !== s && 32 !== i) return !1;i === s && o++;
        }return 3 > o ? !1 : n ? !0 : (e.line = t + 1, e.tokens.push({ type: "hr", lines: [t, e.line], level: e.level }), !0);
      };
    }, {}], 28: [function (e, t) {
      "use strict";
      function r(e) {
        var t = 32 | e;return t >= 97 && 122 >= t;
      }var n = e("../common/html_blocks"),
          s = /^<([a-zA-Z]{1,15})[\s\/>]/,
          o = /^<\/([a-zA-Z]{1,15})[\s>]/;t.exports = function (e, t, i, l) {
        var a,
            c,
            u,
            p = e.bMarks[t],
            h = e.eMarks[t],
            f = e.tShift[t];if (p += f, !e.options.html) return !1;if (f > 3 || p + 2 >= h) return !1;if (60 !== e.src.charCodeAt(p)) return !1;if (a = e.src.charCodeAt(p + 1), 33 === a || 63 === a) {
          if (l) return !0;
        } else {
          if (47 !== a && !r(a)) return !1;if (47 === a) {
            if (c = e.src.slice(p, h).match(o), !c) return !1;
          } else if (c = e.src.slice(p, h).match(s), !c) return !1;if (n[c[1].toLowerCase()] !== !0) return !1;if (l) return !0;
        }for (u = t + 1; u < e.lineMax && !e.isEmpty(u);) {
          u++;
        }return e.line = u, e.tokens.push({ type: "htmlblock", level: e.level, lines: [t, e.line], content: e.getLines(t, u, 0, !0) }), !0;
      };
    }, { "../common/html_blocks": 2 }], 29: [function (e, t) {
      "use strict";
      t.exports = function (e, t, r) {
        var n,
            s,
            o,
            i = t + 1;return i >= r ? !1 : e.tShift[i] < e.blkIndent ? !1 : e.tShift[i] - e.blkIndent > 3 ? !1 : (s = e.bMarks[i] + e.tShift[i], o = e.eMarks[i], s >= o ? !1 : (n = e.src.charCodeAt(s), 45 !== n && 61 !== n ? !1 : (s = e.skipChars(s, n), s = e.skipSpaces(s), o > s ? !1 : (s = e.bMarks[t] + e.tShift[t], e.line = i + 1, e.tokens.push({ type: "heading_open", hLevel: 61 === n ? 1 : 2, lines: [t, e.line], level: e.level }), e.tokens.push({ type: "inline", content: e.src.slice(s, e.eMarks[t]).trim(), level: e.level + 1, lines: [t, e.line - 1], children: [] }), e.tokens.push({ type: "heading_close", hLevel: 61 === n ? 1 : 2, level: e.level }), !0))));
      };
    }, {}], 30: [function (e, t) {
      "use strict";
      function r(e, t) {
        var r, n, s;return n = e.bMarks[t] + e.tShift[t], s = e.eMarks[t], n >= s ? -1 : (r = e.src.charCodeAt(n++), 42 !== r && 45 !== r && 43 !== r ? -1 : s > n && 32 !== e.src.charCodeAt(n) ? -1 : n);
      }function n(e, t) {
        var r,
            n = e.bMarks[t] + e.tShift[t],
            s = e.eMarks[t];if (n + 1 >= s) return -1;if (r = e.src.charCodeAt(n++), 48 > r || r > 57) return -1;for (;;) {
          if (n >= s) return -1;if (r = e.src.charCodeAt(n++), !(r >= 48 && 57 >= r)) {
            if (41 === r || 46 === r) break;return -1;
          }
        }return s > n && 32 !== e.src.charCodeAt(n) ? -1 : n;
      }function s(e, t) {
        var r,
            n,
            s = e.level + 2;for (r = t + 2, n = e.tokens.length - 2; n > r; r++) {
          e.tokens[r].level === s && "paragraph_open" === e.tokens[r].type && (e.tokens[r + 2].tight = !0, e.tokens[r].tight = !0, r += 2);
        }
      }t.exports = function (e, t, o, i) {
        var l,
            a,
            c,
            u,
            p,
            h,
            f,
            d,
            g,
            m,
            b,
            v,
            k,
            _,
            y,
            x,
            w,
            A,
            q,
            C,
            S,
            E,
            M = !0;if ((d = n(e, t)) >= 0) k = !0;else {
          if (!((d = r(e, t)) >= 0)) return !1;k = !1;
        }if (e.level >= e.options.maxNesting) return !1;if (v = e.src.charCodeAt(d - 1), i) return !0;for (y = e.tokens.length, k ? (f = e.bMarks[t] + e.tShift[t], b = Number(e.src.substr(f, d - f - 1)), e.tokens.push({ type: "ordered_list_open", order: b, lines: w = [t, 0], level: e.level++ })) : e.tokens.push({ type: "bullet_list_open", lines: w = [t, 0], level: e.level++ }), l = t, x = !1, q = e.parser.ruler.getRules("list"); !(!(o > l) || (_ = e.skipSpaces(d), g = e.eMarks[l], m = _ >= g ? 1 : _ - d, m > 4 && (m = 1), 1 > m && (m = 1), a = d - e.bMarks[l] + m, e.tokens.push({ type: "list_item_open", lines: A = [t, 0], level: e.level++ }), u = e.blkIndent, p = e.tight, c = e.tShift[t], h = e.parentType, e.tShift[t] = _ - e.bMarks[t], e.blkIndent = a, e.tight = !0, e.parentType = "list", e.parser.tokenize(e, t, o, !0), (!e.tight || x) && (M = !1), x = e.line - t > 1 && e.isEmpty(e.line - 1), e.blkIndent = u, e.tShift[t] = c, e.tight = p, e.parentType = h, e.tokens.push({ type: "list_item_close", level: --e.level }), l = t = e.line, A[1] = l, _ = e.bMarks[t], l >= o) || e.isEmpty(l) || e.tShift[l] < e.blkIndent);) {
          for (E = !1, C = 0, S = q.length; S > C; C++) {
            if (q[C](e, l, o, !0)) {
              E = !0;break;
            }
          }if (E) break;if (k) {
            if (d = n(e, l), 0 > d) break;
          } else if (d = r(e, l), 0 > d) break;if (v !== e.src.charCodeAt(d - 1)) break;
        }return e.tokens.push({ type: k ? "ordered_list_close" : "bullet_list_close", level: --e.level }), w[1] = l, e.line = l, M && s(e, y), !0;
      };
    }, {}], 31: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i,
            l,
            a = t + 1;if (r = e.lineMax, r > a && !e.isEmpty(a)) for (l = e.parser.ruler.getRules("paragraph"); r > a && !e.isEmpty(a); a++) {
          if (!(e.tShift[a] - e.blkIndent > 3)) {
            for (s = !1, o = 0, i = l.length; i > o; o++) {
              if (l[o](e, a, r, !0)) {
                s = !0;break;
              }
            }if (s) break;
          }
        }return n = e.getLines(t, a, e.blkIndent, !1).trim(), e.line = a, n.length && (e.tokens.push({ type: "paragraph_open", tight: !1, lines: [t, e.line], level: e.level }), e.tokens.push({ type: "inline", content: n, level: e.level + 1, lines: [t, e.line], children: [] }), e.tokens.push({ type: "paragraph_close", tight: !1, level: e.level })), !0;
      };
    }, {}], 32: [function (e, t) {
      "use strict";
      function r(e, t, r, n, s) {
        var o, i, l, a, c, u, p;for (this.src = e, this.parser = t, this.options = r, this.env = n, this.tokens = s, this.bMarks = [], this.eMarks = [], this.tShift = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.parentType = "root", this.ddIndent = -1, this.level = 0, this.result = "", i = this.src, u = 0, p = !1, l = a = u = 0, c = i.length; c > a; a++) {
          if (o = i.charCodeAt(a), !p) {
            if (32 === o) {
              u++;continue;
            }p = !0;
          }(10 === o || a === c - 1) && (10 !== o && a++, this.bMarks.push(l), this.eMarks.push(a), this.tShift.push(u), p = !1, u = 0, l = a + 1);
        }this.bMarks.push(i.length), this.eMarks.push(i.length), this.tShift.push(0), this.lineMax = this.bMarks.length - 1;
      }r.prototype.isEmpty = function (e) {
        return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
      }, r.prototype.skipEmptyLines = function (e) {
        for (var t = this.lineMax; t > e && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++) {}return e;
      }, r.prototype.skipSpaces = function (e) {
        for (var t = this.src.length; t > e && 32 === this.src.charCodeAt(e); e++) {}return e;
      }, r.prototype.skipChars = function (e, t) {
        for (var r = this.src.length; r > e && this.src.charCodeAt(e) === t; e++) {}return e;
      }, r.prototype.skipCharsBack = function (e, t, r) {
        if (r >= e) return e;for (; e > r;) {
          if (t !== this.src.charCodeAt(--e)) return e + 1;
        }return e;
      }, r.prototype.getLines = function (e, t, r, n) {
        var s,
            o,
            i,
            l,
            a,
            c = e;if (e >= t) return "";if (c + 1 === t) return o = this.bMarks[c] + Math.min(this.tShift[c], r), i = n ? this.eMarks[c] + 1 : this.eMarks[c], this.src.slice(o, i);for (l = new Array(t - e), s = 0; t > c; c++, s++) {
          a = this.tShift[c], a > r && (a = r), 0 > a && (a = 0), o = this.bMarks[c] + a, i = t > c + 1 || n ? this.eMarks[c] + 1 : this.eMarks[c], l[s] = this.src.slice(o, i);
        }return l.join("");
      }, t.exports = r;
    }, {}], 33: [function (e, t) {
      "use strict";
      function r(e, t) {
        var r = e.bMarks[t] + e.blkIndent,
            n = e.eMarks[t];return e.src.substr(r, n - r);
      }t.exports = function (e, t, n, s) {
        var o, i, l, a, c, u, p, h, f, d, g;if (t + 2 > n) return !1;if (c = t + 1, e.tShift[c] < e.blkIndent) return !1;if (l = e.bMarks[c] + e.tShift[c], l >= e.eMarks[c]) return !1;if (o = e.src.charCodeAt(l), 124 !== o && 45 !== o && 58 !== o) return !1;if (i = r(e, t + 1), !/^[-:| ]+$/.test(i)) return !1;if (u = i.split("|"), 2 >= u) return !1;for (h = [], a = 0; a < u.length; a++) {
          if (f = u[a].trim(), !f) {
            if (0 === a || a === u.length - 1) continue;return !1;
          }if (!/^:?-+:?$/.test(f)) return !1;h.push(58 === f.charCodeAt(f.length - 1) ? 58 === f.charCodeAt(0) ? "center" : "right" : 58 === f.charCodeAt(0) ? "left" : "");
        }if (i = r(e, t).trim(), -1 === i.indexOf("|")) return !1;if (u = i.replace(/^\||\|$/g, "").split("|"), h.length !== u.length) return !1;if (s) return !0;for (e.tokens.push({ type: "table_open", lines: d = [t, 0], level: e.level++ }), e.tokens.push({ type: "thead_open", lines: [t, t + 1], level: e.level++ }), e.tokens.push({ type: "tr_open", lines: [t, t + 1], level: e.level++ }), a = 0; a < u.length; a++) {
          e.tokens.push({ type: "th_open", align: h[a], lines: [t, t + 1], level: e.level++ }), e.tokens.push({ type: "inline", content: u[a].trim(), lines: [t, t + 1], level: e.level, children: [] }), e.tokens.push({ type: "th_close", level: --e.level });
        }for (e.tokens.push({ type: "tr_close", level: --e.level }), e.tokens.push({ type: "thead_close", level: --e.level }), e.tokens.push({ type: "tbody_open", lines: g = [t + 2, 0], level: e.level++ }), c = t + 2; n > c && !(e.tShift[c] < e.blkIndent) && (i = r(e, c).trim(), -1 !== i.indexOf("|")); c++) {
          for (u = i.replace(/^\||\|$/g, "").split("|"), e.tokens.push({ type: "tr_open", level: e.level++ }), a = 0; a < u.length; a++) {
            e.tokens.push({ type: "td_open", align: h[a], level: e.level++ }), p = u[a].substring(124 === u[a].charCodeAt(0) ? 1 : 0, 124 === u[a].charCodeAt(u[a].length - 1) ? u[a].length - 1 : u[a].length).trim(), e.tokens.push({ type: "inline", content: p, level: e.level, children: [] }), e.tokens.push({ type: "td_close", level: --e.level });
          }e.tokens.push({ type: "tr_close", level: --e.level });
        }return e.tokens.push({ type: "tbody_close", level: --e.level }), e.tokens.push({ type: "table_close", level: --e.level }), d[1] = g[1] = c, e.line = c, !0;
      };
    }, {}], 34: [function (e, t) {
      "use strict";
      function r(e, t, r, o) {
        var i, l, a, c, u, p;if (42 !== e.charCodeAt(0)) return -1;if (91 !== e.charCodeAt(1)) return -1;if (-1 === e.indexOf("]:")) return -1;if (i = new n(e, t, r, o, []), l = s(i, 1), 0 > l || 58 !== e.charCodeAt(l + 1)) return -1;for (c = i.posMax, a = l + 2; c > a && 10 !== i.src.charCodeAt(a); a++) {}return u = e.slice(2, l), p = e.slice(l + 2, a).trim(), 0 === p.length ? -1 : (o.abbreviations || (o.abbreviations = {}), "undefined" == typeof o.abbreviations[":" + u] && (o.abbreviations[":" + u] = p), a);
      }var n = e("../rules_inline/state_inline"),
          s = e("../helpers/parse_link_label");t.exports = function (e) {
        var t,
            n,
            s,
            o,
            i = e.tokens;if (!e.inlineMode) for (t = 1, n = i.length - 1; n > t; t++) {
          if ("paragraph_open" === i[t - 1].type && "inline" === i[t].type && "paragraph_close" === i[t + 1].type) {
            for (s = i[t].content; s.length && (o = r(s, e.inline, e.options, e.env), !(0 > o));) {
              s = s.slice(o).trim();
            }i[t].content = s, s.length || (i[t - 1].tight = !0, i[t + 1].tight = !0);
          }
        }
      };
    }, { "../helpers/parse_link_label": 12, "../rules_inline/state_inline": 56 }], 35: [function (e, t) {
      "use strict";
      function r(e) {
        return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
      }var n = " \n()[]'\".,!?-";t.exports = function (e) {
        var t,
            s,
            o,
            i,
            l,
            a,
            c,
            u,
            p,
            h,
            f,
            d,
            g = e.tokens;if (e.env.abbreviations) for (e.env.abbrRegExp || (d = "(^|[" + n.split("").map(r).join("") + "])(" + Object.keys(e.env.abbreviations).map(function (e) {
          return e.substr(1);
        }).sort(function (e, t) {
          return t.length - e.length;
        }).map(r).join("|") + ")($|[" + n.split("").map(r).join("") + "])", e.env.abbrRegExp = new RegExp(d, "g")), h = e.env.abbrRegExp, s = 0, o = g.length; o > s; s++) {
          if ("inline" === g[s].type) for (i = g[s].children, t = i.length - 1; t >= 0; t--) {
            if (l = i[t], "text" === l.type) {
              for (u = 0, a = l.content, h.lastIndex = 0, p = l.level, c = []; f = h.exec(a);) {
                h.lastIndex > u && c.push({ type: "text", content: a.slice(u, f.index + f[1].length), level: p }), c.push({ type: "abbr_open", title: e.env.abbreviations[":" + f[2]], level: p++ }), c.push({ type: "text", content: f[2], level: p }), c.push({ type: "abbr_close", level: --p }), u = h.lastIndex - f[3].length;
              }c.length && (u < a.length && c.push({ type: "text", content: a.slice(u), level: p }), g[s].children = i = [].concat(i.slice(0, t), c, i.slice(t + 1)));
            }
          }
        }
      };
    }, {}], 36: [function (e, t) {
      "use strict";
      t.exports = function (e) {
        e.inlineMode ? e.tokens.push({ type: "inline", content: e.src.replace(/\n/g, " ").trim(), level: 0, lines: [0, 1], children: [] }) : e.block.parse(e.src, e.options, e.env, e.tokens);
      };
    }, {}], 37: [function (e, t) {
      "use strict";
      t.exports = function (e) {
        var t,
            r,
            n,
            s,
            o,
            i,
            l,
            a,
            c,
            u = 0,
            p = !1,
            h = {};if (e.env.footnotes && (e.tokens = e.tokens.filter(function (e) {
          return "footnote_reference_open" === e.type ? (p = !0, a = [], c = e.label, !1) : "footnote_reference_close" === e.type ? (p = !1, h[":" + c] = a, !1) : (p && a.push(e), !p);
        }), e.env.footnotes.list)) {
          for (i = e.env.footnotes.list, e.tokens.push({ type: "footnote_block_open", level: u++ }), t = 0, r = i.length; r > t; t++) {
            for (e.tokens.push({ type: "footnote_open", id: t, level: u++ }), i[t].tokens ? (l = [], l.push({ type: "paragraph_open", tight: !1, level: u++ }), l.push({ type: "inline", content: "", level: u, children: i[t].tokens }), l.push({ type: "paragraph_close", tight: !1, level: --u })) : i[t].label && (l = h[":" + i[t].label]), e.tokens = e.tokens.concat(l), o = "paragraph_close" === e.tokens[e.tokens.length - 1].type ? e.tokens.pop() : null, s = i[t].count > 0 ? i[t].count : 1, n = 0; s > n; n++) {
              e.tokens.push({ type: "footnote_anchor", id: t, subId: n, level: u });
            }o && e.tokens.push(o), e.tokens.push({ type: "footnote_close", level: --u });
          }e.tokens.push({ type: "footnote_block_close", level: --u });
        }
      };
    }, {}], 38: [function (e, t) {
      "use strict";
      t.exports = function (e) {
        var t,
            r,
            n,
            s = e.tokens;for (r = 0, n = s.length; n > r; r++) {
          t = s[r], "inline" === t.type && e.inline.parse(t.content, e.options, e.env, t.children);
        }
      };
    }, {}], 39: [function (e, t) {
      "use strict";
      function r(e) {
        return (/^<a[>\s]/i.test(e)
        );
      }function n(e) {
        return (/^<\/a\s*>/i.test(e)
        );
      }function s() {
        var e = [],
            t = new o({ stripPrefix: !1, url: !0, email: !0, twitter: !1, replaceFn: function replaceFn(t, r) {
            switch (r.getType()) {case "url":
                e.push({ text: r.matchedText, url: r.getUrl() });break;case "email":
                e.push({ text: r.matchedText, url: "mailto:" + r.getEmail().replace(/^mailto:/i, "") });}return !1;
          } });return { links: e, autolinker: t };
      }var o = e("autolinker"),
          i = /www|@|\:\/\//;t.exports = function (e) {
        var t,
            o,
            l,
            a,
            c,
            u,
            p,
            h,
            f,
            d,
            g,
            m,
            b,
            v = e.tokens,
            k = null;if (e.options.linkify) for (o = 0, l = v.length; l > o; o++) {
          if ("inline" === v[o].type) for (a = v[o].children, g = 0, t = a.length - 1; t >= 0; t--) {
            if (c = a[t], "link_close" !== c.type) {
              if ("htmltag" === c.type && (r(c.content) && g > 0 && g--, n(c.content) && g++), !(g > 0) && "text" === c.type && i.test(c.content)) {
                if (k || (k = s(), m = k.links, b = k.autolinker), u = c.content, m.length = 0, b.link(u), !m.length) continue;for (p = [], d = c.level, h = 0; h < m.length; h++) {
                  e.inline.validateLink(m[h].url) && (f = u.indexOf(m[h].text), f && (d = d, p.push({ type: "text", content: u.slice(0, f), level: d })), p.push({ type: "link_open", href: m[h].url, title: "", level: d++ }), p.push({ type: "text", content: m[h].text, level: d }), p.push({ type: "link_close", level: --d }), u = u.slice(f + m[h].text.length));
                }u.length && p.push({ type: "text", content: u, level: d }), v[o].children = a = [].concat(a.slice(0, t), p, a.slice(t + 1));
              }
            } else for (t--; a[t].level !== c.level && "link_open" !== a[t].type;) {
              t--;
            }
          }
        }
      };
    }, { autolinker: 60 }], 40: [function (e, t) {
      "use strict";
      function r(e, t, r, a) {
        var c, u, p, h, f, d, g, m, b;if (91 !== e.charCodeAt(0)) return -1;if (-1 === e.indexOf("]:")) return -1;if (c = new n(e, t, r, a, []), u = s(c, 0), 0 > u || 58 !== e.charCodeAt(u + 1)) return -1;for (h = c.posMax, p = u + 2; h > p && (f = c.src.charCodeAt(p), 32 === f || 10 === f); p++) {}if (!o(c, p)) return -1;for (g = c.linkContent, p = c.pos, d = p, p += 1; h > p && (f = c.src.charCodeAt(p), 32 === f || 10 === f); p++) {}for (h > p && d !== p && i(c, p) ? (m = c.linkContent, p = c.pos) : (m = "", p = d); h > p && 32 === c.src.charCodeAt(p);) {
          p++;
        }return h > p && 10 !== c.src.charCodeAt(p) ? -1 : (b = l(e.slice(1, u)), "undefined" == typeof a.references[b] && (a.references[b] = { title: m, href: g }), p);
      }var n = e("../rules_inline/state_inline"),
          s = e("../helpers/parse_link_label"),
          o = e("../helpers/parse_link_destination"),
          i = e("../helpers/parse_link_title"),
          l = e("../helpers/normalize_reference");t.exports = function (e) {
        var t,
            n,
            s,
            o,
            i = e.tokens;if (e.env.references = e.env.references || {}, !e.inlineMode) for (t = 1, n = i.length - 1; n > t; t++) {
          if ("inline" === i[t].type && "paragraph_open" === i[t - 1].type && "paragraph_close" === i[t + 1].type) {
            for (s = i[t].content; s.length && (o = r(s, e.inline, e.options, e.env), !(0 > o));) {
              s = s.slice(o).trim();
            }i[t].content = s, s.length || (i[t - 1].tight = !0, i[t + 1].tight = !0);
          }
        }
      };
    }, { "../helpers/normalize_reference": 10, "../helpers/parse_link_destination": 11, "../helpers/parse_link_label": 12, "../helpers/parse_link_title": 13, "../rules_inline/state_inline": 56 }], 41: [function (e, t) {
      "use strict";
      function r(e) {
        return e.indexOf("(") < 0 ? e : e.replace(s, function (e, t) {
          return o[t.toLowerCase()];
        });
      }var n = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/,
          s = /\((c|tm|r|p)\)/gi,
          o = { c: "©", r: "®", p: "§", tm: "™" };t.exports = function (e) {
        var t, s, o, i, l;if (e.options.typographer) for (l = e.tokens.length - 1; l >= 0; l--) {
          if ("inline" === e.tokens[l].type) for (i = e.tokens[l].children, t = i.length - 1; t >= 0; t--) {
            s = i[t], "text" === s.type && (o = s.content, o = r(o), n.test(o) && (o = o.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---([^-]|$)/gm, "$1—$2").replace(/(^|\s)--(\s|$)/gm, "$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm, "$1–$2")), s.content = o);
          }
        }
      };
    }, {}], 42: [function (e, t) {
      "use strict";
      function r(e, t) {
        return 0 > t || t >= e.length ? !1 : !i.test(e[t]);
      }function n(e, t, r) {
        return e.substr(0, t) + r + e.substr(t + 1);
      }var s = /['"]/,
          o = /['"]/g,
          i = /[-\s()\[\]]/,
          l = "’";t.exports = function (e) {
        var t, i, a, c, u, p, h, f, d, g, m, b, v, k, _, y, x;if (e.options.typographer) for (x = [], _ = e.tokens.length - 1; _ >= 0; _--) {
          if ("inline" === e.tokens[_].type) for (y = e.tokens[_].children, x.length = 0, t = 0; t < y.length; t++) {
            if (i = y[t], "text" === i.type && !s.test(i.text)) {
              for (h = y[t].level, v = x.length - 1; v >= 0 && !(x[v].level <= h); v--) {}x.length = v + 1, a = i.content, u = 0, p = a.length;e: for (; p > u && (o.lastIndex = u, c = o.exec(a));) {
                if (f = !r(a, c.index - 1), u = c.index + 1, k = "'" === c[0], d = !r(a, u), d || f) {
                  if (m = !d, b = !f) for (v = x.length - 1; v >= 0 && (g = x[v], !(x[v].level < h)); v--) {
                    if (g.single === k && x[v].level === h) {
                      g = x[v], k ? (y[g.token].content = n(y[g.token].content, g.pos, e.options.quotes[2]), i.content = n(i.content, c.index, e.options.quotes[3])) : (y[g.token].content = n(y[g.token].content, g.pos, e.options.quotes[0]), i.content = n(i.content, c.index, e.options.quotes[1])), x.length = v;continue e;
                    }
                  }m ? x.push({ token: t, pos: c.index, single: k, level: h }) : b && k && (i.content = n(i.content, c.index, l));
                } else k && (i.content = n(i.content, c.index, l));
              }
            }
          }
        }
      };
    }, {}], 43: [function (e, t) {
      "use strict";
      var r = e("../common/url_schemas"),
          n = e("../helpers/normalize_link"),
          s = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,
          o = /^<([a-zA-Z.\-]{1,25}):([^<>\x00-\x20]*)>/;t.exports = function (e, t) {
        var i,
            l,
            a,
            c,
            u,
            p = e.pos;return 60 !== e.src.charCodeAt(p) ? !1 : (i = e.src.slice(p), i.indexOf(">") < 0 ? !1 : (l = i.match(o)) ? r.indexOf(l[1].toLowerCase()) < 0 ? !1 : (c = l[0].slice(1, -1), u = n(c), e.parser.validateLink(c) ? (t || (e.push({ type: "link_open", href: u, level: e.level }), e.push({ type: "text", content: c, level: e.level + 1 }), e.push({ type: "link_close", level: e.level })), e.pos += l[0].length, !0) : !1) : (a = i.match(s), a ? (c = a[0].slice(1, -1), u = n("mailto:" + c), e.parser.validateLink(u) ? (t || (e.push({ type: "link_open", href: u, level: e.level }), e.push({ type: "text", content: c, level: e.level + 1 }), e.push({ type: "link_close", level: e.level })), e.pos += a[0].length, !0) : !1) : !1));
      };
    }, { "../common/url_schemas": 4, "../helpers/normalize_link": 9 }], 44: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i,
            l = e.pos,
            a = e.src.charCodeAt(l);if (96 !== a) return !1;for (r = l, l++, n = e.posMax; n > l && 96 === e.src.charCodeAt(l);) {
          l++;
        }for (s = e.src.slice(r, l), o = i = l; -1 !== (o = e.src.indexOf("`", i));) {
          for (i = o + 1; n > i && 96 === e.src.charCodeAt(i);) {
            i++;
          }if (i - o === s.length) return t || e.push({ type: "code", content: e.src.slice(l, o).replace(/[ \n]+/g, " ").trim(), block: !1, level: e.level }), e.pos = i, !0;
        }return t || (e.pending += s), e.pos += s.length, !0;
      };
    }, {}], 45: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i,
            l = e.posMax,
            a = e.pos;if (126 !== e.src.charCodeAt(a)) return !1;if (t) return !1;if (a + 4 >= l) return !1;if (126 !== e.src.charCodeAt(a + 1)) return !1;if (e.level >= e.options.maxNesting) return !1;if (o = a > 0 ? e.src.charCodeAt(a - 1) : -1, i = e.src.charCodeAt(a + 2), 126 === o) return !1;if (126 === i) return !1;if (32 === i || 10 === i) return !1;for (n = a + 2; l > n && 126 === e.src.charCodeAt(n);) {
          n++;
        }if (n > a + 3) return e.pos += n - a, t || (e.pending += e.src.slice(a, n)), !0;for (e.pos = a + 2, s = 1; e.pos + 1 < l;) {
          if (126 === e.src.charCodeAt(e.pos) && 126 === e.src.charCodeAt(e.pos + 1) && (o = e.src.charCodeAt(e.pos - 1), i = e.pos + 2 < l ? e.src.charCodeAt(e.pos + 2) : -1, 126 !== i && 126 !== o && (32 !== o && 10 !== o ? s-- : 32 !== i && 10 !== i && s++, 0 >= s))) {
            r = !0;break;
          }e.parser.skipToken(e);
        }return r ? (e.posMax = e.pos, e.pos = a + 2, t || (e.push({ type: "del_open", level: e.level++ }), e.parser.tokenize(e), e.push({ type: "del_close", level: --e.level })), e.pos = e.posMax + 2, e.posMax = l, !0) : (e.pos = a, !1);
      };
    }, {}], 46: [function (e, t) {
      "use strict";
      function r(e) {
        return e >= 48 && 57 >= e || e >= 65 && 90 >= e || e >= 97 && 122 >= e;
      }function n(e, t) {
        var n,
            s,
            o,
            i = t,
            l = !0,
            a = !0,
            c = e.posMax,
            u = e.src.charCodeAt(t);for (n = t > 0 ? e.src.charCodeAt(t - 1) : -1; c > i && e.src.charCodeAt(i) === u;) {
          i++;
        }return i >= c && (l = !1), o = i - t, o >= 4 ? l = a = !1 : (s = c > i ? e.src.charCodeAt(i) : -1, (32 === s || 10 === s) && (l = !1), (32 === n || 10 === n) && (a = !1), 95 === u && (r(n) && (l = !1), r(s) && (a = !1))), { can_open: l, can_close: a, delims: o };
      }t.exports = function (e, t) {
        var r,
            s,
            o,
            i,
            l,
            a,
            c,
            u = e.posMax,
            p = e.pos,
            h = e.src.charCodeAt(p);if (95 !== h && 42 !== h) return !1;if (t) return !1;if (c = n(e, p), r = c.delims, !c.can_open) return e.pos += r, t || (e.pending += e.src.slice(p, e.pos)), !0;if (e.level >= e.options.maxNesting) return !1;for (e.pos = p + r, a = [r]; e.pos < u;) {
          if (e.src.charCodeAt(e.pos) !== h) e.parser.skipToken(e);else {
            if (c = n(e, e.pos), s = c.delims, c.can_close) {
              for (i = a.pop(), l = s; i !== l;) {
                if (i > l) {
                  a.push(i - l);break;
                }if (l -= i, 0 === a.length) break;e.pos += i, i = a.pop();
              }if (0 === a.length) {
                r = i, o = !0;break;
              }e.pos += s;continue;
            }c.can_open && a.push(s), e.pos += s;
          }
        }return o ? (e.posMax = e.pos, e.pos = p + r, t || ((2 === r || 3 === r) && e.push({ type: "strong_open", level: e.level++ }), (1 === r || 3 === r) && e.push({ type: "em_open", level: e.level++ }), e.parser.tokenize(e), (1 === r || 3 === r) && e.push({ type: "em_close", level: --e.level }), (2 === r || 3 === r) && e.push({ type: "strong_close", level: --e.level })), e.pos = e.posMax + r, e.posMax = u, !0) : (e.pos = p, !1);
      };
    }, {}], 47: [function (e, t) {
      "use strict";
      var r = e("../common/entities"),
          n = e("../common/utils").has,
          s = e("../common/utils").isValidEntityCode,
          o = e("../common/utils").fromCodePoint,
          i = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i,
          l = /^&([a-z][a-z0-9]{1,31});/i;t.exports = function (e, t) {
        var a,
            c,
            u,
            p = e.pos,
            h = e.posMax;if (38 !== e.src.charCodeAt(p)) return !1;if (h > p + 1) if (a = e.src.charCodeAt(p + 1), 35 === a) {
          if (u = e.src.slice(p).match(i)) return t || (c = "x" === u[1][0].toLowerCase() ? parseInt(u[1].slice(1), 16) : parseInt(u[1], 10), e.pending += o(s(c) ? c : 65533)), e.pos += u[0].length, !0;
        } else if (u = e.src.slice(p).match(l), u && n(r, u[1])) return t || (e.pending += r[u[1]]), e.pos += u[0].length, !0;return t || (e.pending += "&"), e.pos++, !0;
      };
    }, { "../common/entities": 1, "../common/utils": 5 }], 48: [function (e, t) {
      "use strict";
      for (var r = [], n = 0; 256 > n; n++) {
        r.push(0);
      }"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function (e) {
        r[e.charCodeAt(0)] = 1;
      }), t.exports = function (e, t) {
        var n,
            s = e.pos,
            o = e.posMax;if (92 !== e.src.charCodeAt(s)) return !1;if (s++, o > s) {
          if (n = e.src.charCodeAt(s), 256 > n && 0 !== r[n]) return t || (e.pending += e.src[s]), e.pos += 2, !0;if (10 === n) {
            for (t || e.push({ type: "hardbreak", level: e.level }), s++; o > s && 32 === e.src.charCodeAt(s);) {
              s++;
            }return e.pos = s, !0;
          }
        }return t || (e.pending += "\\"), e.pos++, !0;
      };
    }, {}], 49: [function (e, t) {
      "use strict";
      var r = e("../helpers/parse_link_label");t.exports = function (e, t) {
        var n,
            s,
            o,
            i,
            l = e.posMax,
            a = e.pos;return a + 2 >= l ? !1 : 94 !== e.src.charCodeAt(a) ? !1 : 91 !== e.src.charCodeAt(a + 1) ? !1 : e.level >= e.options.maxNesting ? !1 : (n = a + 2, s = r(e, a + 1), 0 > s ? !1 : (t || (e.env.footnotes || (e.env.footnotes = {}), e.env.footnotes.list || (e.env.footnotes.list = []), o = e.env.footnotes.list.length, e.pos = n, e.posMax = s, e.push({ type: "footnote_ref", id: o, level: e.level }), e.linkLevel++, i = e.tokens.length, e.parser.tokenize(e), e.env.footnotes.list[o] = { tokens: e.tokens.splice(i) }, e.linkLevel--), e.pos = s + 1, e.posMax = l, !0));
      };
    }, { "../helpers/parse_link_label": 12 }], 50: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i = e.posMax,
            l = e.pos;if (l + 3 > i) return !1;if (!e.env.footnotes || !e.env.footnotes.refs) return !1;if (91 !== e.src.charCodeAt(l)) return !1;if (94 !== e.src.charCodeAt(l + 1)) return !1;if (e.level >= e.options.maxNesting) return !1;for (n = l + 2; i > n; n++) {
          if (32 === e.src.charCodeAt(n)) return !1;if (10 === e.src.charCodeAt(n)) return !1;if (93 === e.src.charCodeAt(n)) break;
        }return n === l + 2 ? !1 : n >= i ? !1 : (n++, r = e.src.slice(l + 2, n - 1), "undefined" == typeof e.env.footnotes.refs[":" + r] ? !1 : (t || (e.env.footnotes.list || (e.env.footnotes.list = []), e.env.footnotes.refs[":" + r] < 0 ? (s = e.env.footnotes.list.length, e.env.footnotes.list[s] = { label: r, count: 0 }, e.env.footnotes.refs[":" + r] = s) : s = e.env.footnotes.refs[":" + r], o = e.env.footnotes.list[s].count, e.env.footnotes.list[s].count++, e.push({ type: "footnote_ref", id: s, subId: o, level: e.level })), e.pos = n, e.posMax = i, !0));
      };
    }, {}], 51: [function (e, t) {
      "use strict";
      function r(e) {
        var t = 32 | e;return t >= 97 && 122 >= t;
      }var n = e("../common/html_re").HTML_TAG_RE;t.exports = function (e, t) {
        var s,
            o,
            i,
            l = e.pos;return e.options.html ? (i = e.posMax, 60 !== e.src.charCodeAt(l) || l + 2 >= i ? !1 : (s = e.src.charCodeAt(l + 1), (33 === s || 63 === s || 47 === s || r(s)) && (o = e.src.slice(l).match(n)) ? (t || e.push({ type: "htmltag", content: e.src.slice(l, l + o[0].length), level: e.level }), e.pos += o[0].length, !0) : !1)) : !1;
      };
    }, { "../common/html_re": 3 }], 52: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i,
            l = e.posMax,
            a = e.pos;if (43 !== e.src.charCodeAt(a)) return !1;if (t) return !1;if (a + 4 >= l) return !1;if (43 !== e.src.charCodeAt(a + 1)) return !1;if (e.level >= e.options.maxNesting) return !1;if (o = a > 0 ? e.src.charCodeAt(a - 1) : -1, i = e.src.charCodeAt(a + 2), 43 === o) return !1;if (43 === i) return !1;if (32 === i || 10 === i) return !1;for (n = a + 2; l > n && 43 === e.src.charCodeAt(n);) {
          n++;
        }if (n !== a + 2) return e.pos += n - a, t || (e.pending += e.src.slice(a, n)), !0;for (e.pos = a + 2, s = 1; e.pos + 1 < l;) {
          if (43 === e.src.charCodeAt(e.pos) && 43 === e.src.charCodeAt(e.pos + 1) && (o = e.src.charCodeAt(e.pos - 1), i = e.pos + 2 < l ? e.src.charCodeAt(e.pos + 2) : -1, 43 !== i && 43 !== o && (32 !== o && 10 !== o ? s-- : 32 !== i && 10 !== i && s++, 0 >= s))) {
            r = !0;break;
          }e.parser.skipToken(e);
        }return r ? (e.posMax = e.pos, e.pos = a + 2, t || (e.push({ type: "ins_open", level: e.level++ }), e.parser.tokenize(e), e.push({ type: "ins_close", level: --e.level })), e.pos = e.posMax + 2, e.posMax = l, !0) : (e.pos = a, !1);
      };
    }, {}], 53: [function (e, t) {
      "use strict";
      var r = e("../helpers/parse_link_label"),
          n = e("../helpers/parse_link_destination"),
          s = e("../helpers/parse_link_title"),
          o = e("../helpers/normalize_reference");t.exports = function (e, t) {
        var i,
            l,
            a,
            c,
            u,
            p,
            h,
            f,
            d = !1,
            g = e.pos,
            m = e.posMax,
            b = e.pos,
            v = e.src.charCodeAt(b);if (33 === v && (d = !0, v = e.src.charCodeAt(++b)), 91 !== v) return !1;if (e.level >= e.options.maxNesting) return !1;if (i = b + 1, l = r(e, b), 0 > l) return !1;if (p = l + 1, m > p && 40 === e.src.charCodeAt(p)) {
          for (p++; m > p && (f = e.src.charCodeAt(p), 32 === f || 10 === f); p++) {}if (p >= m) return !1;for (b = p, n(e, p) ? (c = e.linkContent, p = e.pos) : c = "", b = p; m > p && (f = e.src.charCodeAt(p), 32 === f || 10 === f); p++) {}if (m > p && b !== p && s(e, p)) for (u = e.linkContent, p = e.pos; m > p && (f = e.src.charCodeAt(p), 32 === f || 10 === f); p++) {} else u = "";if (p >= m || 41 !== e.src.charCodeAt(p)) return e.pos = g, !1;p++;
        } else {
          if (e.linkLevel > 0) return !1;for (; m > p && (f = e.src.charCodeAt(p), 32 === f || 10 === f); p++) {}if (m > p && 91 === e.src.charCodeAt(p) && (b = p + 1, p = r(e, p), p >= 0 ? a = e.src.slice(b, p++) : p = b - 1), a || ("undefined" == typeof a && (p = l + 1), a = e.src.slice(i, l)), h = e.env.references[o(a)], !h) return e.pos = g, !1;c = h.href, u = h.title;
        }return t || (e.pos = i, e.posMax = l, d ? e.push({ type: "image", src: c, title: u, alt: e.src.substr(i, l - i), level: e.level }) : (e.push({ type: "link_open", href: c, title: u, level: e.level++ }), e.linkLevel++, e.parser.tokenize(e), e.linkLevel--, e.push({ type: "link_close", level: --e.level }))), e.pos = p, e.posMax = m, !0;
      };
    }, { "../helpers/normalize_reference": 10, "../helpers/parse_link_destination": 11, "../helpers/parse_link_label": 12, "../helpers/parse_link_title": 13 }], 54: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s,
            o,
            i,
            l = e.posMax,
            a = e.pos;if (61 !== e.src.charCodeAt(a)) return !1;if (t) return !1;if (a + 4 >= l) return !1;if (61 !== e.src.charCodeAt(a + 1)) return !1;if (e.level >= e.options.maxNesting) return !1;if (o = a > 0 ? e.src.charCodeAt(a - 1) : -1, i = e.src.charCodeAt(a + 2), 61 === o) return !1;if (61 === i) return !1;if (32 === i || 10 === i) return !1;for (n = a + 2; l > n && 61 === e.src.charCodeAt(n);) {
          n++;
        }if (n !== a + 2) return e.pos += n - a, t || (e.pending += e.src.slice(a, n)), !0;for (e.pos = a + 2, s = 1; e.pos + 1 < l;) {
          if (61 === e.src.charCodeAt(e.pos) && 61 === e.src.charCodeAt(e.pos + 1) && (o = e.src.charCodeAt(e.pos - 1), i = e.pos + 2 < l ? e.src.charCodeAt(e.pos + 2) : -1, 61 !== i && 61 !== o && (32 !== o && 10 !== o ? s-- : 32 !== i && 10 !== i && s++, 0 >= s))) {
            r = !0;break;
          }e.parser.skipToken(e);
        }return r ? (e.posMax = e.pos, e.pos = a + 2, t || (e.push({ type: "mark_open", level: e.level++ }), e.parser.tokenize(e), e.push({ type: "mark_close", level: --e.level })), e.pos = e.posMax + 2, e.posMax = l, !0) : (e.pos = a, !1);
      };
    }, {}], 55: [function (e, t) {
      "use strict";
      t.exports = function (e, t) {
        var r,
            n,
            s = e.pos;if (10 !== e.src.charCodeAt(s)) return !1;if (r = e.pending.length - 1, n = e.posMax, !t) if (r >= 0 && 32 === e.pending.charCodeAt(r)) {
          if (r >= 1 && 32 === e.pending.charCodeAt(r - 1)) {
            for (var o = r - 2; o >= 0; o--) {
              if (32 !== e.pending.charCodeAt(o)) {
                e.pending = e.pending.substring(0, o + 1);break;
              }
            }e.push({ type: "hardbreak", level: e.level });
          } else e.pending = e.pending.slice(0, -1), e.push({ type: "softbreak", level: e.level });
        } else e.push({ type: "softbreak", level: e.level });for (s++; n > s && 32 === e.src.charCodeAt(s);) {
          s++;
        }return e.pos = s, !0;
      };
    }, {}], 56: [function (e, t) {
      "use strict";
      function r(e, t, r, n, s) {
        this.src = e, this.env = n, this.options = r, this.parser = t, this.tokens = s, this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = [], this.isInLabel = !1, this.linkLevel = 0, this.linkContent = "", this.labelUnmatchedScopes = 0;
      }r.prototype.pushPending = function () {
        this.tokens.push({ type: "text", content: this.pending, level: this.pendingLevel }), this.pending = "";
      }, r.prototype.push = function (e) {
        this.pending && this.pushPending(), this.tokens.push(e), this.pendingLevel = this.level;
      }, r.prototype.cacheSet = function (e, t) {
        for (var r = this.cache.length; e >= r; r++) {
          this.cache.push(0);
        }this.cache[e] = t;
      }, r.prototype.cacheGet = function (e) {
        return e < this.cache.length ? this.cache[e] : 0;
      }, t.exports = r;
    }, {}], 57: [function (e, t) {
      "use strict";
      var r = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;t.exports = function (e, t) {
        var n,
            s,
            o = e.posMax,
            i = e.pos;if (126 !== e.src.charCodeAt(i)) return !1;if (t) return !1;if (i + 2 >= o) return !1;if (e.level >= e.options.maxNesting) return !1;for (e.pos = i + 1; e.pos < o;) {
          if (126 === e.src.charCodeAt(e.pos)) {
            n = !0;break;
          }e.parser.skipToken(e);
        }return n && i + 1 !== e.pos ? (s = e.src.slice(i + 1, e.pos), s.match(/(^|[^\\])(\\\\)*\s/) ? (e.pos = i, !1) : (e.posMax = e.pos, e.pos = i + 1, t || e.push({ type: "sub", level: e.level, content: s.replace(r, "$1") }), e.pos = e.posMax + 1, e.posMax = o, !0)) : (e.pos = i, !1);
      };
    }, {}], 58: [function (e, t) {
      "use strict";
      var r = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;t.exports = function (e, t) {
        var n,
            s,
            o = e.posMax,
            i = e.pos;if (94 !== e.src.charCodeAt(i)) return !1;if (t) return !1;if (i + 2 >= o) return !1;if (e.level >= e.options.maxNesting) return !1;for (e.pos = i + 1; e.pos < o;) {
          if (94 === e.src.charCodeAt(e.pos)) {
            n = !0;break;
          }e.parser.skipToken(e);
        }return n && i + 1 !== e.pos ? (s = e.src.slice(i + 1, e.pos), s.match(/(^|[^\\])(\\\\)*\s/) ? (e.pos = i, !1) : (e.posMax = e.pos, e.pos = i + 1, t || e.push({ type: "sup", level: e.level, content: s.replace(r, "$1") }), e.pos = e.posMax + 1, e.posMax = o, !0)) : (e.pos = i, !1);
      };
    }, {}], 59: [function (e, t) {
      "use strict";
      function r(e) {
        switch (e) {case 10:case 92:case 96:case 42:case 95:case 94:case 91:case 93:case 33:case 38:case 60:case 62:case 123:case 125:case 36:case 37:case 64:case 126:case 43:case 61:case 58:
            return !0;default:
            return !1;}
      }t.exports = function (e, t) {
        for (var n = e.pos; n < e.posMax && !r(e.src.charCodeAt(n));) {
          n++;
        }return n === e.pos ? !1 : (t || (e.pending += e.src.slice(e.pos, n)), e.pos = n, !0);
      };
    }, {}], 60: [function (t, r, n) {
      !function (t, s) {
        "function" == typeof e && e.amd ? e([], function () {
          return t.Autolinker = s();
        }) : "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) ? r.exports = s() : t.Autolinker = s();
      }(this, function () {
        var e = function e(t) {
          e.Util.assign(this, t);
        };return e.prototype = { constructor: e, urls: !0, email: !0, twitter: !0, newWindow: !0, stripPrefix: !0, truncate: void 0, className: "", htmlParser: void 0, matchParser: void 0, tagBuilder: void 0, link: function link(e) {
            for (var t = this.getHtmlParser(), r = t.parse(e), n = 0, s = [], o = 0, i = r.length; i > o; o++) {
              var l = r[o],
                  a = l.getType(),
                  c = l.getText();if ("element" === a) "a" === l.getTagName() && (l.isClosing() ? n = Math.max(n - 1, 0) : n++), s.push(c);else if ("entity" === a) s.push(c);else if (0 === n) {
                var u = this.linkifyStr(c);s.push(u);
              } else s.push(c);
            }return s.join("");
          }, linkifyStr: function linkifyStr(e) {
            return this.getMatchParser().replace(e, this.createMatchReturnVal, this);
          }, createMatchReturnVal: function createMatchReturnVal(t) {
            var r;if (this.replaceFn && (r = this.replaceFn.call(this, this, t)), "string" == typeof r) return r;if (r === !1) return t.getMatchedText();if (r instanceof e.HtmlTag) return r.toString();var n = this.getTagBuilder(),
                s = n.build(t);return s.toString();
          }, getHtmlParser: function getHtmlParser() {
            var t = this.htmlParser;return t || (t = this.htmlParser = new e.htmlParser.HtmlParser()), t;
          }, getMatchParser: function getMatchParser() {
            var t = this.matchParser;return t || (t = this.matchParser = new e.matchParser.MatchParser({ urls: this.urls, email: this.email, twitter: this.twitter, stripPrefix: this.stripPrefix })), t;
          }, getTagBuilder: function getTagBuilder() {
            var t = this.tagBuilder;return t || (t = this.tagBuilder = new e.AnchorTagBuilder({ newWindow: this.newWindow, truncate: this.truncate, className: this.className })), t;
          } }, e.link = function (t, r) {
          var n = new e(r);return n.link(t);
        }, e.match = {}, e.htmlParser = {}, e.matchParser = {}, e.Util = { abstractMethod: function abstractMethod() {
            throw "abstract";
          }, assign: function assign(e, t) {
            for (var r in t) {
              t.hasOwnProperty(r) && (e[r] = t[r]);
            }return e;
          }, extend: function extend(t, r) {
            var n = t.prototype,
                s = function s() {};s.prototype = n;var o;o = r.hasOwnProperty("constructor") ? r.constructor : function () {
              n.constructor.apply(this, arguments);
            };var i = o.prototype = new s();return i.constructor = o, i.superclass = n, delete r.constructor, e.Util.assign(i, r), o;
          }, ellipsis: function ellipsis(e, t, r) {
            return e.length > t && (r = null == r ? ".." : r, e = e.substring(0, t - r.length) + r), e;
          }, indexOf: function indexOf(e, t) {
            if (Array.prototype.indexOf) return e.indexOf(t);for (var r = 0, n = e.length; n > r; r++) {
              if (e[r] === t) return r;
            }return -1;
          }, splitAndCapture: function splitAndCapture(e, t) {
            if (!t.global) throw new Error("`splitRegex` must have the 'g' flag set");for (var r, n = [], s = 0; r = t.exec(e);) {
              n.push(e.substring(s, r.index)), n.push(r[0]), s = r.index + r[0].length;
            }return n.push(e.substring(s)), n;
          } }, e.HtmlTag = e.Util.extend(Object, { whitespaceRegex: /\s+/, constructor: function constructor(t) {
            e.Util.assign(this, t), this.innerHtml = this.innerHtml || this.innerHTML;
          }, setTagName: function setTagName(e) {
            return this.tagName = e, this;
          }, getTagName: function getTagName() {
            return this.tagName || "";
          }, setAttr: function setAttr(e, t) {
            var r = this.getAttrs();return r[e] = t, this;
          }, getAttr: function getAttr(e) {
            return this.getAttrs()[e];
          }, setAttrs: function setAttrs(t) {
            var r = this.getAttrs();return e.Util.assign(r, t), this;
          }, getAttrs: function getAttrs() {
            return this.attrs || (this.attrs = {});
          }, setClass: function setClass(e) {
            return this.setAttr("class", e);
          }, addClass: function addClass(t) {
            for (var r, n = this.getClass(), s = this.whitespaceRegex, o = e.Util.indexOf, i = n ? n.split(s) : [], l = t.split(s); r = l.shift();) {
              -1 === o(i, r) && i.push(r);
            }return this.getAttrs()["class"] = i.join(" "), this;
          }, removeClass: function removeClass(t) {
            for (var r, n = this.getClass(), s = this.whitespaceRegex, o = e.Util.indexOf, i = n ? n.split(s) : [], l = t.split(s); i.length && (r = l.shift());) {
              var a = o(i, r);-1 !== a && i.splice(a, 1);
            }return this.getAttrs()["class"] = i.join(" "), this;
          }, getClass: function getClass() {
            return this.getAttrs()["class"] || "";
          }, hasClass: function hasClass(e) {
            return -1 !== (" " + this.getClass() + " ").indexOf(" " + e + " ");
          }, setInnerHtml: function setInnerHtml(e) {
            return this.innerHtml = e, this;
          }, getInnerHtml: function getInnerHtml() {
            return this.innerHtml || "";
          }, toString: function toString() {
            var e = this.getTagName(),
                t = this.buildAttrsStr();return t = t ? " " + t : "", ["<", e, t, ">", this.getInnerHtml(), "</", e, ">"].join("");
          }, buildAttrsStr: function buildAttrsStr() {
            if (!this.attrs) return "";var e = this.getAttrs(),
                t = [];for (var r in e) {
              e.hasOwnProperty(r) && t.push(r + '="' + e[r] + '"');
            }return t.join(" ");
          } }), e.AnchorTagBuilder = e.Util.extend(Object, { constructor: function constructor(t) {
            e.Util.assign(this, t);
          }, build: function build(t) {
            var r = new e.HtmlTag({ tagName: "a", attrs: this.createAttrs(t.getType(), t.getAnchorHref()), innerHtml: this.processAnchorText(t.getAnchorText()) });return r;
          }, createAttrs: function createAttrs(e, t) {
            var r = { href: t },
                n = this.createCssClass(e);return n && (r["class"] = n), this.newWindow && (r.target = "_blank"), r;
          }, createCssClass: function createCssClass(e) {
            var t = this.className;return t ? t + " " + t + "-" + e : "";
          }, processAnchorText: function processAnchorText(e) {
            return e = this.doTruncate(e);
          }, doTruncate: function doTruncate(t) {
            return e.Util.ellipsis(t, this.truncate || Number.POSITIVE_INFINITY);
          } }), e.htmlParser.HtmlParser = e.Util.extend(Object, { htmlRegex: function () {
            var e = /[0-9a-zA-Z][0-9a-zA-Z:]*/,
                t = /[^\s\0"'>\/=\x01-\x1F\x7F]+/,
                r = /(?:"[^"]*?"|'[^']*?'|[^'"=<>`\s]+)/,
                n = t.source + "(?:\\s*=\\s*" + r.source + ")?";return new RegExp(["(?:", "<(!DOCTYPE)", "(?:", "\\s+", "(?:", n, "|", r.source + ")", ")*", ">", ")", "|", "(?:", "<(/)?", "(" + e.source + ")", "(?:", "\\s+", n, ")*", "\\s*/?", ">", ")"].join(""), "gi");
          }(), htmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi, parse: function parse(e) {
            for (var t, r, n = this.htmlRegex, s = 0, o = []; null !== (t = n.exec(e));) {
              var i = t[0],
                  l = t[1] || t[3],
                  a = !!t[2],
                  c = e.substring(s, t.index);c && (r = this.parseTextAndEntityNodes(c), o.push.apply(o, r)), o.push(this.createElementNode(i, l, a)), s = t.index + i.length;
            }if (s < e.length) {
              var u = e.substring(s);u && (r = this.parseTextAndEntityNodes(u), o.push.apply(o, r));
            }return o;
          }, parseTextAndEntityNodes: function parseTextAndEntityNodes(t) {
            for (var r = [], n = e.Util.splitAndCapture(t, this.htmlCharacterEntitiesRegex), s = 0, o = n.length; o > s; s += 2) {
              var i = n[s],
                  l = n[s + 1];i && r.push(this.createTextNode(i)), l && r.push(this.createEntityNode(l));
            }return r;
          }, createElementNode: function createElementNode(t, r, n) {
            return new e.htmlParser.ElementNode({ text: t, tagName: r.toLowerCase(), closing: n });
          }, createEntityNode: function createEntityNode(t) {
            return new e.htmlParser.EntityNode({ text: t });
          }, createTextNode: function createTextNode(t) {
            return new e.htmlParser.TextNode({ text: t });
          } }), e.htmlParser.HtmlNode = e.Util.extend(Object, { text: "", constructor: function constructor(t) {
            e.Util.assign(this, t);
          }, getType: e.Util.abstractMethod, getText: function getText() {
            return this.text;
          } }), e.htmlParser.ElementNode = e.Util.extend(e.htmlParser.HtmlNode, { tagName: "", closing: !1, getType: function getType() {
            return "element";
          }, getTagName: function getTagName() {
            return this.tagName;
          }, isClosing: function isClosing() {
            return this.closing;
          } }), e.htmlParser.EntityNode = e.Util.extend(e.htmlParser.HtmlNode, { getType: function getType() {
            return "entity";
          } }), e.htmlParser.TextNode = e.Util.extend(e.htmlParser.HtmlNode, { getType: function getType() {
            return "text";
          } }), e.matchParser.MatchParser = e.Util.extend(Object, { urls: !0, email: !0, twitter: !0, stripPrefix: !0, matcherRegex: function () {
            var e = /(^|[^\w])@(\w{1,15})/,
                t = /(?:[\-;:&=\+\$,\w\.]+@)/,
                r = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\/\/)(?!\d+\/?)(?:\/\/)?)/,
                n = /(?:www\.)/,
                s = /[A-Za-z0-9\.\-]*[A-Za-z0-9\-]/,
                o = /\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\b/,
                i = /[\-A-Za-z0-9+&@#\/%=~_()|'$*\[\]?!:,.;]*[\-A-Za-z0-9+&@#\/%=~_()|'$*\[\]]/;return new RegExp(["(", e.source, ")", "|", "(", t.source, s.source, o.source, ")", "|", "(", "(?:", "(", r.source, s.source, ")", "|", "(?:", "(.?//)?", n.source, s.source, ")", "|", "(?:", "(.?//)?", s.source, o.source, ")", ")", "(?:" + i.source + ")?", ")"].join(""), "gi");
          }(), charBeforeProtocolRelMatchRegex: /^(.)?\/\//, constructor: function constructor(t) {
            e.Util.assign(this, t), this.matchValidator = new e.MatchValidator();
          }, replace: function replace(e, t, r) {
            var n = this;return e.replace(this.matcherRegex, function (e, s, o, i, l, a, c, u, p) {
              var h = n.processCandidateMatch(e, s, o, i, l, a, c, u, p);if (h) {
                var f = t.call(r, h.match);return h.prefixStr + f + h.suffixStr;
              }return e;
            });
          }, processCandidateMatch: function processCandidateMatch(t, r, n, s, o, i, l, a, c) {
            var u,
                p = a || c,
                h = "",
                f = "";if (r && !this.twitter || o && !this.email || i && !this.urls || !this.matchValidator.isValidMatch(i, l, p)) return null;if (this.matchHasUnbalancedClosingParen(t) && (t = t.substr(0, t.length - 1), f = ")"), o) u = new e.match.Email({ matchedText: t, email: o });else if (r) n && (h = n, t = t.slice(1)), u = new e.match.Twitter({ matchedText: t, twitterHandle: s });else {
              if (p) {
                var d = p.match(this.charBeforeProtocolRelMatchRegex)[1] || "";d && (h = d, t = t.slice(1));
              }u = new e.match.Url({ matchedText: t, url: t, protocolUrlMatch: !!l, protocolRelativeMatch: !!p, stripPrefix: this.stripPrefix });
            }return { prefixStr: h, suffixStr: f, match: u };
          }, matchHasUnbalancedClosingParen: function matchHasUnbalancedClosingParen(e) {
            var t = e.charAt(e.length - 1);if (")" === t) {
              var r = e.match(/\(/g),
                  n = e.match(/\)/g),
                  s = r && r.length || 0,
                  o = n && n.length || 0;if (o > s) return !0;
            }return !1;
          } }), e.MatchValidator = e.Util.extend(Object, { invalidProtocolRelMatchRegex: /^[\w]\/\//, hasFullProtocolRegex: /^[A-Za-z][-.+A-Za-z0-9]+:\/\//, uriSchemeRegex: /^[A-Za-z][-.+A-Za-z0-9]+:/, hasWordCharAfterProtocolRegex: /:[^\s]*?[A-Za-z]/, isValidMatch: function isValidMatch(e, t, r) {
            return t && !this.isValidUriScheme(t) || this.urlMatchDoesNotHaveProtocolOrDot(e, t) || this.urlMatchDoesNotHaveAtLeastOneWordChar(e, t) || this.isInvalidProtocolRelativeMatch(r) ? !1 : !0;
          }, isValidUriScheme: function isValidUriScheme(e) {
            var t = e.match(this.uriSchemeRegex)[0].toLowerCase();return "javascript:" !== t && "vbscript:" !== t;
          }, urlMatchDoesNotHaveProtocolOrDot: function urlMatchDoesNotHaveProtocolOrDot(e, t) {
            return !(!e || t && this.hasFullProtocolRegex.test(t) || -1 !== e.indexOf("."));
          }, urlMatchDoesNotHaveAtLeastOneWordChar: function urlMatchDoesNotHaveAtLeastOneWordChar(e, t) {
            return e && t ? !this.hasWordCharAfterProtocolRegex.test(e) : !1;
          }, isInvalidProtocolRelativeMatch: function isInvalidProtocolRelativeMatch(e) {
            return !!e && this.invalidProtocolRelMatchRegex.test(e);
          } }), e.match.Match = e.Util.extend(Object, { constructor: function constructor(t) {
            e.Util.assign(this, t);
          }, getType: e.Util.abstractMethod, getMatchedText: function getMatchedText() {
            return this.matchedText;
          }, getAnchorHref: e.Util.abstractMethod, getAnchorText: e.Util.abstractMethod }), e.match.Email = e.Util.extend(e.match.Match, { getType: function getType() {
            return "email";
          }, getEmail: function getEmail() {
            return this.email;
          }, getAnchorHref: function getAnchorHref() {
            return "mailto:" + this.email;
          }, getAnchorText: function getAnchorText() {
            return this.email;
          } }), e.match.Twitter = e.Util.extend(e.match.Match, { getType: function getType() {
            return "twitter";
          }, getTwitterHandle: function getTwitterHandle() {
            return this.twitterHandle;
          }, getAnchorHref: function getAnchorHref() {
            return "https://twitter.com/" + this.twitterHandle;
          }, getAnchorText: function getAnchorText() {
            return "@" + this.twitterHandle;
          } }), e.match.Url = e.Util.extend(e.match.Match, { urlPrefixRegex: /^(https?:\/\/)?(www\.)?/i, protocolRelativeRegex: /^\/\//, protocolPrepended: !1, getType: function getType() {
            return "url";
          }, getUrl: function getUrl() {
            var e = this.url;return this.protocolRelativeMatch || this.protocolUrlMatch || this.protocolPrepended || (e = this.url = "http://" + e, this.protocolPrepended = !0), e;
          }, getAnchorHref: function getAnchorHref() {
            var e = this.getUrl();return e.replace(/&amp;/g, "&");
          }, getAnchorText: function getAnchorText() {
            var e = this.getUrl();return this.protocolRelativeMatch && (e = this.stripProtocolRelativePrefix(e)), this.stripPrefix && (e = this.stripUrlPrefix(e)), e = this.removeTrailingSlash(e);
          }, stripUrlPrefix: function stripUrlPrefix(e) {
            return e.replace(this.urlPrefixRegex, "");
          }, stripProtocolRelativePrefix: function stripProtocolRelativePrefix(e) {
            return e.replace(this.protocolRelativeRegex, "");
          }, removeTrailingSlash: function removeTrailingSlash(e) {
            return "/" === e.charAt(e.length - 1) && (e = e.slice(0, -1)), e;
          } }), e;
      });
    }, {}], "/": [function (e, t) {
      "use strict";
      t.exports = e("./lib/");
    }, { "./lib/": 14 }] }, {}, [])("/");
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _highlightMin = __webpack_require__(0);

var _highlightMin2 = _interopRequireDefault(_highlightMin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_highlightMin2.default.registerLanguage("crystal", function (e) {
  function b(e, b) {
    var r = [{ b: e, e: b }];return r[0].c = r, r;
  }var r = "(_[uif](8|16|32|64))?",
      c = "[a-zA-Z_]\\w*[!?=]?",
      i = "!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",
      n = "[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?",
      s = { keyword: "abstract alias as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__", literal: "false nil true" },
      t = { cN: "subst", b: "#{", e: "}", k: s },
      a = { cN: "template-variable", v: [{ b: "\\{\\{", e: "\\}\\}" }, { b: "\\{%", e: "%\\}" }], k: s },
      l = { cN: "string", c: [e.BE, t], v: [{ b: /'/, e: /'/ }, { b: /"/, e: /"/ }, { b: /`/, e: /`/ }, { b: "%w?\\(", e: "\\)", c: b("\\(", "\\)") }, { b: "%w?\\[", e: "\\]", c: b("\\[", "\\]") }, { b: "%w?{", e: "}", c: b("{", "}") }, { b: "%w?<", e: ">", c: b("<", ">") }, { b: "%w?/", e: "/" }, { b: "%w?%", e: "%" }, { b: "%w?-", e: "-" }, { b: "%w?\\|", e: "\\|" }, { b: /<<-\w+$/, e: /^\s*\w+$/ }], r: 0 },
      u = { cN: "string", v: [{ b: "%q\\(", e: "\\)", c: b("\\(", "\\)") }, { b: "%q\\[", e: "\\]", c: b("\\[", "\\]") }, { b: "%q{", e: "}", c: b("{", "}") }, { b: "%q<", e: ">", c: b("<", ">") }, { b: "%q/", e: "/" }, { b: "%q%", e: "%" }, { b: "%q-", e: "-" }, { b: "%q\\|", e: "\\|" }, { b: /<<-'\w+'$/, e: /^\s*\w+$/ }], r: 0 },
      _ = { b: "(" + i + ")\\s*", c: [{ cN: "regexp", c: [e.BE, t], v: [{ b: "//[a-z]*", r: 0 }, { b: "/", e: "/[a-z]*" }, { b: "%r\\(", e: "\\)", c: b("\\(", "\\)") }, { b: "%r\\[", e: "\\]", c: b("\\[", "\\]") }, { b: "%r{", e: "}", c: b("{", "}") }, { b: "%r<", e: ">", c: b("<", ">") }, { b: "%r/", e: "/" }, { b: "%r%", e: "%" }, { b: "%r-", e: "-" }, { b: "%r\\|", e: "\\|" }] }], r: 0 },
      o = { cN: "regexp", c: [e.BE, t], v: [{ b: "%r\\(", e: "\\)", c: b("\\(", "\\)") }, { b: "%r\\[", e: "\\]", c: b("\\[", "\\]") }, { b: "%r{", e: "}", c: b("{", "}") }, { b: "%r<", e: ">", c: b("<", ">") }, { b: "%r/", e: "/" }, { b: "%r%", e: "%" }, { b: "%r-", e: "-" }, { b: "%r\\|", e: "\\|" }], r: 0 },
      w = { cN: "meta", b: "@\\[", e: "\\]", c: [e.inherit(e.QSM, { cN: "meta-string" })] },
      f = [a, l, u, _, o, w, e.HCM, { cN: "class", bK: "class module struct", e: "$|;", i: /=/, c: [e.HCM, e.inherit(e.TM, { b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?" }), { b: "<" }] }, { cN: "class", bK: "lib enum union", e: "$|;", i: /=/, c: [e.HCM, e.inherit(e.TM, { b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?" })], r: 10 }, { cN: "function", bK: "def", e: /\B\b/, c: [e.inherit(e.TM, { b: n, endsParent: !0 })] }, { cN: "function", bK: "fun macro", e: /\B\b/, c: [e.inherit(e.TM, { b: n, endsParent: !0 })], r: 5 }, { cN: "symbol", b: e.UIR + "(\\!|\\?)?:", r: 0 }, { cN: "symbol", b: ":", c: [l, { b: n }], r: 0 }, { cN: "number", v: [{ b: "\\b0b([01_]*[01])" + r }, { b: "\\b0o([0-7_]*[0-7])" + r }, { b: "\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])" + r }, { b: "\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)" + r }], r: 0 }];return t.c = f, a.c = f.slice(1), { aliases: ["cr"], l: c, k: s, c: f };
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,